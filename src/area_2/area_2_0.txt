<article>
	<div><p><strong>模拟 HttpServer 系列：启用线程池（03）</strong></p><p class="w3-right">2018-03-27</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了提升 HttpServer 的并发处理能力<samp>，</samp>现添加线程池。</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 Tomcat 8.0 的源码中<samp>，</samp>其内部是实现了 ThreadPoolExecutor 类并以此创建了 worker 线程池<samp>，</samp>但这也只是在 JDK 提供的 ThreadPoolExecutor 类的基础上进行的简单封装。我们直接使用 JDK 的 ThreadPoolExecutor 类创建线程池即可。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/57.txt',id:'prevtonext'},{url:'src/area_2/articles/0058/0058.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>模拟 HttpServer 系列：接收表单数据（02）</strong></p><p class="w3-right">2018-03-26</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以 GET 方式发起请求时<samp>，</samp>请求参数通常会拼在 URL 地址内<samp>，</samp>获取参数也比较简单<samp>，</samp>现重点关注如何获取表单数据即 POST 请求参数。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/56.txt',id:'prevtonext'},{url:'src/area_2/articles/0057/0057.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>模拟 HttpServer 系列：HelloWorld（01）</strong></p><p class="w3-right">2018-03-25</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了能够更加透彻地理解 Java Web 服务器的工作原理<samp>，</samp>个人打算基于 JDK1.8 实现一个简单的 HttpServer<samp>，</samp>本着实践出真知的信念不断 coding<samp>，</samp>永无止境。</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特别说明：先以最简单、最熟悉的方式入手<samp>，</samp>然后循序渐进地自我完善。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/55.txt',id:'prevtonext'},{url:'src/area_2/articles/0056/0056.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Tomcat 8.0 之工作原理</strong></p><p class="w3-right">2018-03-21</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tomcat 是一个免费且开放源码的 Web 应用服务器<samp>，</samp>主要用以处理 JSP 和 Servlet<samp>，</samp>也可以处理诸如 HTML 等静态资源<samp>，</samp>但性能不比 Apache 或 Nginx 服务器。现简单介绍一下 Tomcat 8.0 之工作原理。</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特别说明：在理解 Tomcat 8.0 之工作原理之前<samp>，</samp>最好对 Java 语言的线程池（ThreadPoolExecutor）的实现原理有清晰的认识<samp>，</samp>在此基础上再去理解 Tomcat 8.0 之工作原理将变得轻车熟路。对 ThreadPoolExecutor 比较陌生的童鞋请翻看博主之前贴出的文章。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/54.txt',id:'prevtonext'},{url:'src/area_2/articles/0055/0055.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong><span class="w3-text-light-green">转载</span> --- 透彻的掌握 Spring 中 @transactional 的使用</strong></p><p class="w3-right">2018-03-20</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事务管理是应用系统开发中必不可少的一部分。Spring 为事务管理提供了丰富的功能支持。Spring 事务管理分为编码式和声明式两种方式。编程式事务指的是通过编码方式实现事务<samp>；</samp>声明式事务基于 AOP<samp>，</samp>将具体业务逻辑与事务处理解耦。声明式事务管理使业务代码逻辑不受污染<samp>，</samp>因此在实际使用中声明式事务用的比较多。声明式事务有两种方式<samp>，</samp>一种是在配置文件（xml）中做相关的事务规则声明<samp>，</samp>另一种是基于 @Transactional 注解的方式。注释配置是目前流行的使用方式<samp>，</samp>因此本文将着重介绍基于 @Transactional 注解的事务管理。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/53.txt',id:'prevtonext'},{url:'src/area_2/articles/0054/0054.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：模拟 SpringMVC 中的过滤器处理流程（08）</strong></p><p class="w3-right">2018-03-17</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于 HTML 中的 form 表单只支持 GET、POST 请求<samp>，</samp>为了使基于 SpringMVC 的 Web 应用支持 PUT、DELETE 请求<samp>，</samp>我们可以在 web.xml 文件中添加 HiddenHttpMethodFilter 达到该目的。在默认配置下<samp>，</samp>当我们发起的请求包含中文时<samp>，</samp>后台处理该请求时可能会有乱码产生<samp>，</samp>解决该问题的办法通常也是在 web.xml 文件中添加 CharacterEncodingFilter 。</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么 Web 应用中的过滤器是如何工作的呢？现简单模拟一下 Web 应用中过滤器的大致处理流程以及基于责任链模式（Chain of Responsibility Pattern）的过滤器实现。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/52.txt',id:'prevtonext'},{url:'src/area_2/articles/0053/0053.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：Visitor Pattern（07）</strong></p><p class="w3-right">2018-03-16</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 SpringMVC 框架中存在着诸多设计模式<samp>，</samp>例如<samp>，</samp>单例模式、适配器模式、责任链模式以及访问者模式等<samp>，</samp>当然<samp>，</samp>MVC 模式是显而易见的。因阅读了处理 Java class 文件的源码时遭遇访问者模式<samp>，</samp>现再次整理一下该知识点。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/51.txt',id:'prevtonext'},{url:'src/area_2/articles/0052/0052.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：ASM 之读写字节码（06）</strong></p><p class="w3-right">2018-03-15</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在分析 SpringMVC 工作原理时遇到了 ClassReader 类<samp>，</samp>根据 Spring <a target="_blank" class="w3-link" href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/javadoc-api/org/springframework/asm/ClassReader.html">API</a> 文档可知<samp>，</samp>该类是 Java class 文件的解析器<samp>，</samp>即读取字节码。除了 ClassReader 类之外<samp>，</samp>在 Spring 核心 jar 文件的 org.springframework.asm 包路径下<samp>，</samp>还涉及了很多用以对字节码进行各种不同处理的类<samp>，</samp>例如<samp>，</samp>ClassVisitor、ClassWriter 等<samp>，</samp>现简要整理一下部分类的用法。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/50.txt',id:'prevtonext'},{url:'src/area_2/articles/0051/0051.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：支持 PUT、DELETE 请求（05）</strong></p><p class="w3-right">2018-03-12</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUT、DELETE 请求是用来干什么的？具体可以参考 Spring 官方文档 <a target="_blank" class="w3-link" href="https://spring.io/understanding/REST">Understanding REST</a> 。事实上<samp>，</samp>博主在曾经的工作中也碰到过 RESTful 架构的应用<samp>，</samp>当时也只是简单地使用了 Spring 提供的模板类 RestTemplate 进行开发<samp>，</samp>由于彼时还没有写个人博客的习惯<samp>，</samp>时至今日<samp>，</samp>在开发中遇到的很多细节问题早已淡忘<samp>，</samp>真是岁月不饶人。</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有想了解什么是 RESTful 架构的童鞋可以阅读以下资料：</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. <a target="_blank" class="w3-link" href="http://www.ruanyifeng.com/blog/2011/09/restful.html">理解 RESTful 架构</a>（阮一峰老师的博客文章）<samp>；</samp></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 《<a target="_blank" class="w3-link" href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures</a>》<samp>；</samp></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 《<a target="_blank" class="w3-link" href="https://yuedu.baidu.com/ebook/780324fbf121dd36a32d8269">架构风格与基于网络应用软件的架构设计</a>》<samp>，</samp>Roy Fielding 博士论文中文版。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/49.txt',id:'prevtonext'},{url:'src/area_2/articles/0050/0050.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：参数绑定（04）</strong></p><p class="w3-right">2018-03-11</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参数绑定<samp>，</samp>简而言之就是将客户端发起请求时所携带的某些数据映射到对应控制器的具体方法参数上的操作。例如<samp>，</samp>思考一下用户通过注册页面将姓名、密码等数据提交至服务器端的业务场景<samp>，</samp>这些姓名、密码等数据随 HTTP 请求到达服务器端之后<samp>，</samp>它们会由对应控制器的注册方法来接收这些数据<samp>，</samp>那么<samp>，</samp>请求数据与方法入参之间的映射就是参数绑定。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/48.txt',id:'prevtonext'},{url:'src/area_2/articles/0049/0049.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>