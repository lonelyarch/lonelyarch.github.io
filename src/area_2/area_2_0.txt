<article>
	<div><p><strong>SpringMVC 系列：Visitor Pattern（07）</strong></p><p class="w3-right">2018-03-16</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 SpringMVC 框架中存在着诸多设计模式<samp>，</samp>例如<samp>，</samp>单例模式、适配器模式、责任链模式以及访问者模式等<samp>，</samp>当然<samp>，</samp>MVC 模式是显而易见的。因阅读了处理 Java class 文件的源码时遭遇访问者模式<samp>，</samp>现再次整理一下该知识点。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/51.txt',id:'prevtonext'},{url:'src/area_2/articles/0052/0052.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：ASM 之读写字节码（06）</strong></p><p class="w3-right">2018-03-15</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在分析 SpringMVC 工作原理时遇到了 ClassReader 类<samp>，</samp>根据 Spring <a target="_blank" class="w3-link" href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/javadoc-api/org/springframework/asm/ClassReader.html">API</a> 文档可知<samp>，</samp>该类是 Java class 文件的解析器<samp>，</samp>即读取字节码。除了 ClassReader 类之外<samp>，</samp>在 Spring 核心 jar 文件的 org.springframework.asm 包路径下<samp>，</samp>还涉及了很多用以对字节码进行各种不同处理的类<samp>，</samp>例如<samp>，</samp>ClassVisitor、ClassWriter 等<samp>，</samp>现简要整理一下部分类的用法。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/50.txt',id:'prevtonext'},{url:'src/area_2/articles/0051/0051.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：支持 PUT、DELETE 请求（05）</strong></p><p class="w3-right">2018-03-12</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUT、DELETE 请求是用来干什么的？具体可以参考 Spring 官方文档 <a target="_blank" class="w3-link" href="https://spring.io/understanding/REST">Understanding REST</a> 。事实上<samp>，</samp>博主在曾经的工作中也碰到过 RESTful 架构的应用<samp>，</samp>当时也只是简单地使用了 Spring 提供的模板类 RestTemplate 进行开发<samp>，</samp>由于彼时还没有写个人博客的习惯<samp>，</samp>时至今日<samp>，</samp>在开发中遇到的很多细节问题早已淡忘<samp>，</samp>真是岁月不饶人。</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有想了解什么是 RESTful 架构的童鞋可以阅读以下资料：</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. <a target="_blank" class="w3-link" href="http://www.ruanyifeng.com/blog/2011/09/restful.html">理解 RESTful 架构</a>（阮一峰老师的博客文章）<samp>；</samp></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 《<a target="_blank" class="w3-link" href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Architectural Styles and the Design of Network-based Software Architectures</a>》<samp>；</samp></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 《<a target="_blank" class="w3-link" href="https://yuedu.baidu.com/ebook/780324fbf121dd36a32d8269">架构风格与基于网络应用软件的架构设计</a>》<samp>，</samp>Roy Fielding 博士论文中文版。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/49.txt',id:'prevtonext'},{url:'src/area_2/articles/0050/0050.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：参数绑定（04）</strong></p><p class="w3-right">2018-03-11</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参数绑定<samp>，</samp>简而言之就是将客户端发起请求时所携带的某些数据映射到对应控制器的具体方法参数上的操作。例如<samp>，</samp>思考一下用户通过注册页面将姓名、密码等数据提交至服务器端的业务场景<samp>，</samp>这些姓名、密码等数据随 HTTP 请求到达服务器端之后<samp>，</samp>它们会由对应控制器的注册方法来接收这些数据<samp>，</samp>那么<samp>，</samp>请求数据与方法入参之间的映射就是参数绑定。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/48.txt',id:'prevtonext'},{url:'src/area_2/articles/0049/0049.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：@Controller 注解之 value 值的生成（03）</strong></p><p class="w3-right">2018-03-10</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在理解 SpringMVC 工作原理的过程中遇到很多细节疑问<samp>，</samp>解答这些细节疑问的办法也有很多种<samp>，</samp>现举例以 debug 的方式解答一个比较简单的疑问：使用 @Controller 注解<samp>，</samp>在没有指定控制器名称的情况下<samp>，</samp>它的默认值是如何生成的？例如：</p>
		<pre style="overflow:auto">    // @Controller(<span class="w3-text-light-green">value</span> = "myCustomUserController")
    @Controller
    public class UserController {
        ...
    }</pre>
		<div><p>在 <span class="w3-text-light-green">value</span> 值没有指定的情况下<samp>，</samp>控制器 UserController 的名称是怎样生成的？它会是什么？</p></div>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/47.txt',id:'prevtonext'},{url:'src/area_2/articles/0048/0048.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：Web MVC 的工作原理（02）</strong></p><p class="w3-right">2018-03-09</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在简单搭建了 HelloWorld 应用之后<samp>，</samp>为了更深入的了解 SpringMVC 中的 Model、View 以及 Controller 之间的运行机制<samp>，</samp>我们有必要探知它内部的实现原理<samp>，</samp>这在处理工作中遇到的问题时会很有帮助。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/46.txt',id:'prevtonext'},{url:'src/area_2/articles/0047/0047.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SpringMVC 系列：5 分钟搭建 HelloWorld（01）</strong></p><p class="w3-right">2018-03-07</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相信任何开发过 Java Web 应用的童鞋对 SpringMVC 框架一定不陌生<samp>，</samp>至于该框架的优点也是显而易见<samp>，</samp>在此不赘述<samp>，</samp>如果你曾经使用了 Servlet 原生技术实现过类似的 Web 应用或 Demo<samp>，</samp>两相对比之后<samp>，</samp>那么你可能会对 SpringMVC 框架更加情有独钟。</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;博主在最初参加工作的时候<samp>，</samp>准确地说<samp>，</samp>是在参加工作之前的入职培训期间<samp>，</samp>就已经接触过 Spring<samp>，</samp>当时还十分流行 SSH<samp>，</samp>那个时候的 SpringMVC 貌似还不是很出名。在工作期间<samp>，</samp>个人也碰到过使用 SpringMVC 框架实现 Web 应用的项目<samp>，</samp>现将曾经整理过的相关笔记贴出来<samp>，</samp>也算是对 SpringMVC 框架知识点的一次回顾。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/45.txt',id:'prevtonext'},{url:'src/area_2/articles/0046/0046.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>负载均衡（Load Balance）之数据链路层方式</strong></p><p class="w3-right">2018-01-23</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在初探负载均衡技术之后<samp>，</samp>逐步意识到该技术涉及知识点之深之广<samp>，</samp>单从类别上可分为<span class="w3-text-light-green">硬件</span>负载均衡和<span class="w3-text-light-green">软件</span>负载均衡<samp>，</samp>而基于<span class="w3-text-light-green">软件</span>层面的负载均衡技术的实现方式又可分为 HTTP 重定向负载均衡、DNS 域名解析负载均衡、反向代理负载均衡、IP 负载均衡以及数据链路层负载均衡（LVS 是数据链路层负载均衡开源产品<samp>，</samp>有兴趣的童鞋<a rel="noopener noreferrer nofollow" target="_blank" class="w3-link" href="http://www.linuxvirtualserver.org/zh/lvs1.html">戳这里</a>）。</p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本文不打算把负载均衡技术所涉及的各方面都整理一遍<samp>，</samp>因为时间宝贵<samp>，</samp>更是囿于个人水平和知识储备<samp>，</samp>现简要整理一下<span class="w3-text-light-green">数据链路层负载均衡</span>的相关知识点<samp>，</samp>以加深理解。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/44.txt',id:'prevtonext'},{url:'src/area_2/articles/0045/0045.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>负载均衡（Load Balance）</strong></p><p class="w3-right">2018-01-17</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对<samp>“负载均衡（Load Balance）”</samp>这种技术早有所闻<samp>，</samp>但是<samp>，</samp>只因在实际工作中从来就没有接触过与之有关的项目<samp>，</samp>所以<samp>，</samp>个人对这项技术的认知也只是停留在略有所闻的层面<samp>，</samp>最近在阅读 Web 应用服务器集群的可伸缩性设计的某些文章时遭遇了<samp>“负载均衡（Load Balance）”</samp>的概念<samp>，</samp>通过查阅资料对这项技术有了更进一步的了解<samp>，</samp>现整理之。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/43.txt',id:'prevtonext'},{url:'src/area_2/articles/0044/0044.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：<span class="w3-text-light-green">转载</span> --- Copy-On-Write 容器（17）</strong></p><p class="w3-right">2018-01-13</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy-On-Write 简称 COW<samp>，</samp>是一种用于程序设计中的优化策略。它的基本思路是<samp>，</samp>从一开始大家都在共享同一个内容<samp>，</samp>当某个人想要修改这个内容的时候<samp>，</samp>才会真正把内容 Copy 出去形成一个新的内容然后再改<samp>，</samp>这是一种<span class="w3-text-light-green">延时懒惰策略</span>。从 JDK1.5 开始<samp>，</samp>Java 并发包里提供了两个使用 CopyOnWrite 机制实现的并发容器<samp>，</samp>它们是 CopyOnWriteArrayList 和 CopyOnWriteArraySet。CopyOnWrite 容器非常有用<samp>，</samp>可以在非常多的并发场景中使用到。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/42.txt',id:'prevtonext'},{url:'src/area_2/articles/0043/0043.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>