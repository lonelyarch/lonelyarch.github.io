<article>
	<div><p><strong>Java 并发编程系列：图文并茂之 hsdis 编译（08）</strong></p><p class="w3-right">2017-10-07</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是 <span style="color:#8bc34a">hsdis(HotSpot Disassembler)</span>？顾名思义，它是个反汇编神器，有想目睹 Java 代码编译之后的汇编模样，那么这款神器是你不可错过的。博主原本是打算从 CSDN 上下载一个 <span style="color:#8bc34a">hsdis-amd64.dll</span>，无奈币值不够，只能自力更生。网上有很多文章也介绍了编译 <span style="color:#8bc34a">hsdis</span> 的所需步骤，但基本都是文字描述，看起来比较费劲。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/27.txt',id:'prevtonext'},{url:'src/area_2/articles/0028/0028.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：为什么总是在 while 循环之内调用 wait() 方法？（07）</strong></p><p class="w3-right">2017-10-03</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 Java API 文档里对 Object 类中的 wait() 方法有如下文字描述：</P>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;As in the one argument version, interrupts and spurious wakeups are possible, and <span style="color:#8bc34a">this method should always be used in a loop</span>:</p>
		<pre><code class="hljs w3-light-gray" style="padding:0;overflow:hidden;text-overflow:ellipsis">&nbsp;&nbsp;synchronized (obj) {
    &nbsp;&nbsp;while (&lt;condition does not hold&gt;)
        &nbsp;&nbsp;<apan style="color:#8bc34a">obj.wait();</apan>
    &nbsp;&nbsp;... // Perform action appropriate to condition
&nbsp;&nbsp;}</code></pre>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这就是说，在调用 Object 类中的 wait() 方法的时候，因为中断和伪唤醒（spurious wakeup）可能会发生，所以应该将 wait() 方法置于 while 循环内执行。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/26.txt',id:'prevtonext'},{url:'src/area_2/articles/0027/0027.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：synchronized 关键字之重入锁的实现（06）</strong></p><p class="w3-right">2017-10-02</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是重入锁？简而言之，当前线程持有了一个锁对象并且需要再次持有该锁对象，即重复加锁。<span style="color:#8bc34a">ReentrantLock</span> 类是 JDK 实现的重入锁，更加确切地说，该类是实现了公平或非公平策略的可重复加锁机制。对 <span style="color:#8bc34a">ReentrantLock</span> 类的深究不在该篇文章的撰写之内，为学习之目的，自造一个简易的轮子。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/25.txt',id:'prevtonext'},{url:'src/area_2/articles/0026/0026.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：synchronized 关键字之死锁（05）</strong></p><p class="w3-right">2017-09-29</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 Java 编程语言里，使用 synchronized 关键字的目的是确保线程安全，但是，如果你的代码写得不完美，那么就有可能导致死锁。谈到死锁，博主最先想到的是经典的<span class="w3-text-red">哲学家就餐问题</span>，这个问题毕竟是在大学课本里出现过。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/24.txt',id:'prevtonext'},{url:'src/area_2/articles/0025/0025.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：synchronized 关键字之基本应用示例（04）</strong></p><p class="w3-right">2017-09-27</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在简单了解 synchronized 关键字的基本原理之后再给出基本应用示例是非常必要的，没有实践应用，知识点讲得天花乱坠也只能是纸上谈兵，身为一名合格的程序员的前提就是务实的精神常在。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/23.txt',id:'prevtonext'},{url:'src/area_2/articles/0024/0024.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：synchronized 关键字之起因（02）</strong></p><p class="w3-right">2017-09-25</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;谈及并发编程，进程、线程是不可回避的两点，简而言之，它们是并发编程里的两个基本执行单元，都是为了提升系统的处理能力和资源使用率而存在。在 Java 并发编程里，我们主要涉及线程。有想了解进程、线程详情的童鞋<a target="_blank" class="w3-link" href="https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html">戳这里</a>。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/21.txt',id:'prevtonext'},{url:'src/area_2/articles/0022/0022.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：Thread 类（01）</strong></p><p class="w3-right">2017-09-23</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;身为一个以 Java 为主要开发语言的程序员，工作几年了也没有对并发编程这个知识块做过系统性地总结，略表内疚，对不常用的东西要么束之高阁、要么弃之如敝屣，这种处事待物的态度早就习惯了，也就不会过分感觉有所失。从今天起，博主会对 Java 并发编程这个知识块做个相对实用的总结，说服自己的理由是：对并发编程不欣赏的程序员不是个好程序员。</p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;言归正传。虽然网上有很多优秀的同行从业者写了很多有关 Java 并发编程这个知识块的优秀博文，但是，读别人的文章总感觉对事物的认知不够深刻，还是那句话，纸上得来终觉浅，绝知此事要躬行。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/20.txt',id:'prevtonext'},{url:'src/area_2/articles/0021/0021.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>深入理解红黑树（red-black tree）</strong></p><p class="w3-right">2017-05-27</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前在整理 HashMap 相关知识点的时候，博主就曾碰到过<span class="w3-text-light-green">红黑树</span>，当时浮现在大脑里的树不仅有它，还有哈夫曼树、二叉查找树、B_树，甚至是苹果树，然而，在职场上几经摸爬滚打之后，博主已忘记了这些树原本的模样，真是岁月不饶人。</P>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现打算重温学生时代的记忆和印象，找回过去的那个懂得许多树的我，这么说还是比较浮夸的，从现实出发就是，在将要整理出 TreeMap 知识点的时候，博主又遭遇了 <span class="w3-text-light-green">A Red-Black tree</span>，实属缘分之不易。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/19.txt',id:'prevtonext'},{url:'src/area_2/articles/0020/0020.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 集合类：LinkedHashMap</strong></p><p class="w3-right">2017-05-19</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hash table and linked list implementation of the Map interface, with predictable iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running through all of its entries...</P>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于 Map 接口的哈希表和链表实现，具有可预测的迭代顺序，与 HashMap 的不同之处在于，它对所有的 entry 操作都是基于双向链表完成的（LinkedHashMap&lt;K,V&gt; extends <span class="w3-text-light-green">HashMap&lt;K,V&gt;</span> implements Map&lt;K,V&gt;）……</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/18.txt',id:'prevtonext'},{url:'src/area_2/articles/0019/0019.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 集合类：HashMap 续篇</strong></p><p class="w3-right">2017-05-05</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在初探 HashMap 之后尚有很多遗留问题，例如，HashMap 大小为什么是 2 的 n 次方？HashMap 为什么会使用红黑树存储数据？HashMap 死循环是怎样造成的……</P>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因时间所限，博主挑了一个易于理解的问题简单回答一下，棘手的问题将在适当的时间再次整理。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/17.txt',id:'prevtonext'},{url:'src/area_2/articles/0018/0018.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>