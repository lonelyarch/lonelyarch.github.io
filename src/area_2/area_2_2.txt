<article>
	<div><p><strong>Java 并发编程系列：<span class="w3-text-light-green">转载</span> --- Copy-On-Write 容器（17）</strong></p><p class="w3-right">2018-01-13</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copy-On-Write 简称 COW<samp>，</samp>是一种用于程序设计中的优化策略。它的基本思路是<samp>，</samp>从一开始大家都在共享同一个内容<samp>，</samp>当某个人想要修改这个内容的时候<samp>，</samp>才会真正把内容 Copy 出去形成一个新的内容然后再改<samp>，</samp>这是一种<span class="w3-text-light-green">延时懒惰策略</span>。从 JDK1.5 开始<samp>，</samp>Java 并发包里提供了两个使用 CopyOnWrite 机制实现的并发容器<samp>，</samp>它们是 CopyOnWriteArrayList 和 CopyOnWriteArraySet。CopyOnWrite 容器非常有用<samp>，</samp>可以在非常多的并发场景中使用到。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/42.txt',id:'prevtonext'},{url:'src/area_2/articles/0043/0043.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>SVG（Scalable Vector Graphics）</strong></p><p class="w3-right">2018-01-09</p></div>
	<div style="clear: both;"></div>
	<div>
		<svg style="width:100%;min-height:300px">
			<line x1="50%" y1="25%" x2="25%" y2="50%" style="stroke:rgba(255,255,255,0.6);stroke-width:1" />
			<line x1="50%" y1="25%" x2="75%" y2="50%" style="stroke:rgba(255,255,255,0.6);stroke-width:1" />
			<line x1="75%" y1="50%" x2="60%" y2="75%" style="stroke:rgba(255,255,255,0.6);stroke-width:1" />
			<line x1="25%" y1="50%" x2="10%" y2="75%" style="stroke:rgba(255,255,255,0.6);stroke-width:1" />
			<line x1="25%" y1="50%" x2="40%" y2="75%" style="stroke:rgba(255,255,255,0.6);stroke-width:1" />
			<circle cx="50%" cy="25%" r="5%" fill="teal" />
			<text x="50%" y="25%" text-anchor="middle" fill="white" dy="2.5%">7</text>
			<circle cx="25%" cy="50%" r="5%" fill="teal" />
			<text x="25%" y="50%" text-anchor="middle" fill="white" dy="2.5%">3</text>
			<circle cx="75%" cy="50%" r="5%" fill="teal" />
			<text x="75%" y="50%" text-anchor="middle" fill="white" dy="2.5%">9</text>
			<circle cx="60%" cy="75%" r="5%" fill="teal" />
			<text x="60%" y="75%" text-anchor="middle" fill="white" dy="2.5%">8</text>
			<circle cx="10%" cy="75%" r="5%" fill="teal" />
			<text x="10%" y="75%" text-anchor="middle" fill="white" dy="2.5%">2</text>
			<circle cx="40%" cy="75%" r="5%" fill="teal" />
			<text x="40%" y="75%" text-anchor="middle" fill="white" dy="2.5%">5</text>
		</svg>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/41.txt',id:'prevtonext'},{url:'src/area_2/articles/0042/0042.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：ThreadPoolExecutor 续篇（16）</strong></p><p class="w3-right">2018-01-02</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在简单了解 ThreadPoolExecutor 的基本应用、阻塞队列以及饱和策略之后，现以源码为切入点再着重分析一下此线程池的实现原理，尽可能达到知其然知其所以然。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/40.txt',id:'prevtonext'},{url:'src/area_2/articles/0041/0041.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：ThreadPoolExecutor 初探（15）</strong></p><p class="w3-right">2017-12-31</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreadPoolExecutor，顾名思义，简单理解为，这是一个用以管理、维护线程的线程池，它与数据库连接池的应用可谓异曲同工，虽然两者管理、维护的对象不同，但核心思想是一致的，即重复使用现有对象以降低因创建、销毁对象等操作所占用的系统资源，从而提升业务处理能力。</p>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/39.txt',id:'prevtonext'},{url:'src/area_2/articles/0040/0040.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>CSS + JS 实现简易版扫雷</strong></p><p class="w3-right">2017-12-25</p></div>
	<div style="clear: both;"></div>
	<div class="w3-example-mine-sweeping-01-02_0039">
		<script>
			(function(){var cols=6;var rows=6;var node=document.getElementsByClassName("w3-example-mine-sweeping-01-02_0039")[0];var arrx=[];var arry=[];var bool=false;for(let col=1;col<=cols;col++){var coln=document.createElement("div");coln.setAttribute("class","cols");arrx[col-1]=[];arry[col-1]=[];for(let row=1;row<=rows;row++){var wrap=document.createElement("div");wrap.setAttribute("class","wrap");var item=document.createElement("div");item.setAttribute("class","item");arry[col-1][row-1]=item;var back=document.createElement("div");back.style.transform="translate(0,-52px)";back.setAttribute("class","back");back.addEventListener("click",function(){if(bool){show();setTimeout(function(){cler();load(rand());},500);bool = false;}});item.addEventListener("click",function(){if(this.nextSibling.className.indexOf("mine")==-1){this.className+=" hide";}else{hide();bool=true;}});wrap.appendChild(item);wrap.appendChild(back);coln.appendChild(wrap);arrx[col-1][row-1]=back;}node.appendChild(coln);}
				load(rand());
				function show(){for(let col=1;col<=cols;col++){for(let row=1;row<=rows;row++){if(arry[col-1][row-1].className.indexOf("hide")==-1)continue;arry[col-1][row-1].className=arry[col-1][row-1].className.replace(" hide","");}}}
				function hide(){for(let col=1;col<=cols;col++){for(let row=1;row<=rows;row++){if(arry[col-1][row-1].className.indexOf("hide")>-1)continue;arry[col-1][row-1].className+=" hide";}}}
				function rand(){var r=[];var x=Math.floor(Math.random()*10)%5+1;for(let i=0;i<x;i++){var y=Math.floor(Math.random()*100)%36+1;r.push(y);}return r;}
				function load(arrz){for(let col=1;col<=cols;col++){for(let row=1;row<=rows;row++){if(jude(arrz,(row-1)*6+col)){if(arrx[col-1][row-1].className.indexOf("mine")>-1)break;arrx[col-1][row-1].className+=" mine";}}}}
				function jude(arrz,t){for(let n=0;n<arrz.length;n++){if((arrz[n]==t)){return true;}}return false;}
				function cler(){for(let col=1;col<=cols;col++){for(let row=1;row<=rows;row++){arrx[col-1][row-1].className=arrx[col-1][row-1].className.replace(" mine","");}}}
			})();
		</script>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/38.txt',id:'prevtonext'},{url:'src/area_2/articles/0039/0039.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>面包屑导航（Breadcrumb Navigation）</strong></p><p class="w3-right">2017-12-24</p></div>
	<div style="clear: both;"></div>
	<div class="w3-example-breadcrumb-navigation-01-02_0038">
		<div>
			<a>首页</a><a>关于</a><a>职业提升</a><a>生活随笔</a>
		</div>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/37.txt',id:'prevtonext'},{url:'src/area_2/articles/0038/0038.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：ReentrantLock 之源码调试（14）</strong></p><p class="w3-right">2017-12-16</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在阅读过同行从业者写的关于 AQS（AbstractQueuedSynchronizer）知识点的博文之后，根据理论加以实践是必不可少的，还是那句话：<span class="w3-text-light-green">纸上得来终觉浅，绝知此事要躬行</span>。</P>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本篇文章主要是借助 eclipse 开发工具对 JDK1.8 源码之 ReentrantLock 进行调试，以理解基于 AQS 的独占功能的实现过程。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/36.txt',id:'prevtonext'},{url:'src/area_2/articles/0037/0037.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：<span class="w3-text-light-green">转载</span> --- JDK1.8 AbstractQueuedSynchronizer 的实现分析（下）</strong></p><p class="w3-right">2017-12-11</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过本系列的上半部分 <a target="_blank" class="w3-link" href="http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer">JDK1.8 AbstractQueuedSynchronizer 的实现分析（上）</a>的解读，相信很多读者对 AbstractQueuedSynchronizer 的独占功能已了然于胸，趁热打铁，这次我们通过对另一个工具类：CountDownLatch 的分析来解读 AQS 的另外一个功能：共享功能。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/35.txt',id:'prevtonext'},{url:'src/area_2/articles/0036/0036.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：<span class="w3-text-light-green">转载</span> --- JDK1.8 AbstractQueuedSynchronizer 的实现分析（上）</strong></p><p class="w3-right">2017-12-08</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，ReentrantLock 的功能是实现代码段的并发访问控制，也就是通常意义上所说的锁，在没有看到 AbstractQueuedSynchronizer 之前，你可能会以为它的实现是通过类似于 synchronized，通过给对象加锁来实现的。但事实上，它只是一个工具类，仅是作为一个普普通通的类就完成了代码块的并发访问控制，这就让人疑惑它怎么实现的代码块的并发访问控制的。文中将以 AQS 代替 AbstractQueuedSynchronizer 。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/34.txt',id:'prevtonext'},{url:'src/area_2/articles/0035/0035.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>
<hr style="border: none; border-top: 1px dotted white;">
<article>
	<div><p><strong>Java 并发编程系列：ThreadLocal（13）</strong></p><p class="w3-right">2017-11-13</p></div>
	<div style="clear: both;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one has its own, independently initialized copy of the variable.</P>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述英文源自 JDK1.8 官方文档里对 ThreadLocal 的介绍，博主试图这样翻译：</P>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreadLocal 类用以提供<span class="w3-text-light-green">线程-本地</span>变量，这些<span class="w3-text-light-green">线程-本地</span>变量与它们的常规副本的区别是，每一个线程都只能访问它自身拥有的<span class="w3-text-light-green">线程-本地</span>变量，且该<span class="w3-text-light-green">线程-本地</span>变量独立于变量的初始化拷贝。</P>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然勉强翻译出了字面意思，但个人对英文源句还是不知所云，没关系，直接给出一个代码示例，通过观察执行结果，疑问将豁然开朗。</P>
	</div>
	<div><p>……</p></div>
	<div><p style="text-align: right;"><a onclick="initl();fetch([{url:'src/area_2/prevtonext/33.txt',id:'prevtonext'},{url:'src/area_2/articles/0034/0034.txt',id:'contents'}]);" href="javascript:void(0);" class="w3-text-blue" style="text-decoration: none;">继续阅读 »</a></p></div>
</article>