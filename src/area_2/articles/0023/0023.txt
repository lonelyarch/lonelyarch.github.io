<article>
	<div><p><strong>Java 并发编程系列：synchronized 关键字之原理（03）</strong></p><p class="w3-right w3-margin-0">2017-09-26</p></div>
	<div style="clear: both;"></div>
	<div><hr style="margin-top: 0;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在概述了 synchronized 关键字因何而来之后，身为一个不折不扣的程序员，为了知其然再知其所以然，是不是需要了解一下它的实现原理？</P>
	</div>
	<div><p>一、Java 编程语言提供了两个基本的同步语义：<span style="font-style:italic">synchronized methods</span> 和 <span style="font-style:italic">synchronized statements</span>（可以简单理解为同步方法和同步代码块）。</p></div>
	<div><p><strong>同步方法</strong></p></div>
	<div class="w3-example">
		<div class="w3-code" style="max-height:300px;height:100%;overflow-y:auto">
			<pre><code class="hljs">package com.hsdis.demo;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> SynchronizedDemo {
    <span class="hljs-keyword">public</span> synchronized <span class="hljs-keyword">void</span> <span class="hljs-title">method</span>() {
        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"synchronized method..."</span>);
    }
}</code></pre>
		</div>
	</div>
	<div><p>用 javap 工具反编译该类，得出字节码：</p></div>
	<div><img class="w3-width" alt="Oops" src="src/area_2/articles/0023/images/01.jpg"></div>
	<div><p>重点关注字节码里的黄色字迹 <span style="color:yellow">flags: ACC_SYNCHRONIZED</span>，通过查阅 <a target="_blank" class="w3-link" href="https://docs.oracle.com/javase/specs/jvms/se8/html/">Java Virtual Machine Specification</a>（JVM 规范）可知，每一个方法，包括每一个实例的初始化方法和类或接口的初始化方法，都是由一个为 <strong>method_info</strong> 的结构体来描述的，该结构体的格式如下所示：</p></div>
	<div class="w3-example w3-light-green" style="padding-left:32px;overflow:auto">
		<pre><code class="hljs" style="background-color:#8bc34a">method_info <span class="hljs-list">{
    u2             access_flags;
    u2             name_index;
    u2             descriptor_index;
    u2             attributes_count;
    attribute_info attributes[attributes_count];
}</span></code></pre>
	</div>
	<div><p>重点关注 <strong>access_flags</strong> 字段，该字段代表了访问权限和方法属性，以下列出它的取值集合：</p></div>
	<div>
		<table class="w3-table w3-border w3-bordered">
			<thead>
				<tr class="w3-light-green">
					<th>Flag Name</th>
					<th>Value</th>
					<th>Interpretation</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td><code>ACC_PUBLIC</code></td>
					<td>0x0001</td>
					<td>Declared <code>public</code>; may be accessed from
						outside its package.
					</td>
				</tr>
				<tr>
					<td><code>ACC_PRIVATE</code></td>
					<td>0x0002</td>
					<td>Declared <code>private</code>; accessible only within
						the defining class.
					</td>
				</tr>
				<tr>
					<td><code>ACC_PROTECTED</code></td>
					<td>0x0004</td>
					<td>Declared <code>protected</code>; may be accessed
						within subclasses.
					</td>
				</tr>
				<tr>
					<td><code>ACC_STATIC</code></td>
					<td>0x0008</td>
					<td>Declared <code>static</code>.
					</td>
				</tr>
				<tr>
					<td><code>ACC_FINAL</code></td>
					<td>0x0010</td>
					<td>Declared <code>final</code>; must not be overridden.
					</td>
				</tr>
				<tr style="color:yellow">
					<td><code>ACC_SYNCHRONIZED</code></td>
					<td>0x0020</td>
					<td>Declared <code>synchronized</code>; invocation is
						wrapped by a monitor use.
					</td>
				</tr>
				<tr>
					<td><code>ACC_BRIDGE</code></td>
					<td>0x0040</td>
					<td>A bridge method, generated by the compiler.</td>
				</tr>
				<tr>
					<td><code>ACC_VARARGS</code></td>
					<td>0x0080</td>
					<td>Declared with variable number of arguments.</td>
				</tr>
				<tr>
					<td><code>ACC_NATIVE</code></td>
					<td>0x0100</td>
					<td>Declared <code>native</code>; implemented in a
						language other than Java.
					</td>
				</tr>
				<tr>
					<td><code>ACC_ABSTRACT</code></td>
					<td>0x0400</td>
					<td>Declared <code>abstract</code>; no implementation is
						provided.
					</td>
				</tr>
				<tr>
					<td><code>ACC_STRICT</code></td>
					<td>0x0800</td>
					<td>Declared <code>strictfp</code>; floating-point mode
						is FP-strict.
					</td>
				</tr>
				<tr>
					<td><code>ACC_SYNTHETIC</code></td>
					<td>0x1000</td>
					<td>Declared synthetic; not present in the source code.</td>
				</tr>
			</tbody>
		</table>
	</div>
	<div><p><strong>同步代码块</strong></p></div>
	<div class="w3-example">
		<div class="w3-code" style="max-height:300px;height:100%;overflow-y:auto">
			<pre><code class="hljs">package com.hsdis.demo;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> SynchronizedDemo {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span>() {
        synchronized (<span class="hljs-keyword">this</span>) {
            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"synchronized method..."</span>);
        }
    }
}</code></pre>
		</div>
	</div>
	<div><p>用 javap 工具反编译该类，得出字节码：</p></div>
	<div><img class="w3-width" alt="Oops" src="src/area_2/articles/0023/images/02.jpg"></div>
	<div><p>重点关注字节码里的黄色字迹 <span style="color:yellow">monitorenter</span>、<span style="color:yellow">monitorexit</span>，通过查阅 <a target="_blank" class="w3-link" href="https://docs.oracle.com/javase/specs/jvms/se8/html/">Java Virtual Machine Specification</a>（JVM 规范）可知，<span style="color:yellow">monitorenter</span> 为进入 monitor 指令，<span style="color:yellow">monitorexit</span> 为退出 monitor 指令。以下给出两条指令的描述：</p>
	<div>
		<table class="w3-table w3-border w3-bordered">
			<thead>
				<tr class="w3-light-green">
					<th>Format of Instruction</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>monitorenter</td>
					<td>The <span style="color:#8bc34a">objectref</span> must be of type <span style="color:#8bc34a">reference</span>.（<span style="color:#8bc34a">objectref</span> 是一个操作数，操作数是汇编语言指令的一个字段）<p>Each object is associated with a <span style="color:#8bc34a">monitor</span>. A <span style="color:#8bc34a">monitor</span> is locked if and only if it has an owner. The thread that executes <span style="color:#8bc34a">monitorenter</span> attempts to gain ownership of the <span style="color:#8bc34a">monitor</span> associated with <span style="color:#8bc34a">objectref</span>, as follows:</p>
						<ul style="padding-left:0;list-style:decimal">
							<li>If the entry count of the <span style="color:#8bc34a">monitor</span> associated with <span style="color:#8bc34a">objectref</span> is zero, the thread enters the <span style="color:#8bc34a">monitor</span> and sets its entry count to one. The thread is then the owner of the <span style="color:#8bc34a">monitor</span>.</li>
							<li>If the thread already owns the <span style="color:#8bc34a">monitor</span> associated with <span style="color:#8bc34a">objectref</span>, it reenters the <span style="color:#8bc34a">monitor</span>, incrementing its entry count.</li>
							<li>If another thread already owns the <span style="color:#8bc34a">monitor</span> associated with <span style="color:#8bc34a">objectref</span>, the thread blocks until the <span style="color:#8bc34a">monitor</span>'s entry count is zero, then tries again to gain ownership.</li>
						</ul>
					</td>
				</tr>
				<tr>
					<td>monitorexit</td>
					<td>The <span style="color:#8bc34a">objectref</span> must be of type <span style="color:#8bc34a">reference</span>.（<span style="color:#8bc34a">objectref</span> 是一个操作数，操作数是汇编语言指令的一个字段）<p>The thread that executes <span style="color:#8bc34a">monitorexit</span> must be the owner of the <span style="color:#8bc34a">monitor</span> associated with the instance referenced by <span style="color:#8bc34a">objectref</span>.</p><p>The thread decrements the entry count of the <span style="color:#8bc34a">monitor</span> associated with <span style="color:#8bc34a">objectref</span>. If as a result the value of the entry count is zero, the thread exits the <span style="color:#8bc34a">monitor</span> and is no longer its owner. Other threads that are blocking to enter the <span style="color:#8bc34a">monitor</span> are allowed to attempt to do so.</p></td>
				</tr>
			</tbody>
		</table>
	</div>
	<div><p><strong style="color:yellow">注意：</strong></p></div>
	<div>
		<ul style="padding-left:0;list-style:decimal">
			<li><span style="color:#8bc34a">A monitorenter instruction</span> may be used with <span style="color:#8bc34a">one or more monitorexit instructions</span> to implement a synchronized statement in the Java programming language.</li>
			<li>The monitorenter and monitorexit instructions are not used in the implementation of synchronized methods, although they can be used to provide equivalent locking semantics. Monitor entry on invocation of a synchronized method, and monitor exit on its return, <span style="color:#8bc34a">are handled implicitly by the Java Virtual Machine's method invocation</span> and return instructions, as if monitorenter and monitorexit were used.（<a target="_blank" class="w3-link" href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.monitorenter">原文链接</a>）</li>
		</ul>
	</div>
	<div><p>二、根据对同步方法、同步代码块示例代码的字节码关键点信息可知：</p></div>
	<div><p>在 Java 编程语言里，不论是同步方法（synchronized methods）还是同步代码块（synchronized statements），它们最终都是由 monitor 来实现同步。</p></div>
	<div><p>同步方法（synchronized methods）由 <span style="color:yellow">ACC_SYNCHRONIZED 标识符</span>与非同步方法加以区分，<span style="color:yellow">ACC_SYNCHRONIZED 标识符</span>则存在于运行时常量池的 method_info 结构体内，如果方法调用指令检查出当前被调方法由 <span style="color:yellow">ACC_SYNCHRONIZED</span> 标识，那么执行线程就会进入 monitor 再调用该方法，在方法调用完成之后，执行线程则退出 monitor。</p></div>
	<div><p>同步代码块（synchronized statements）由 JVM 提供的 monitorenter 和 monitorexit 指令来实现，相对同步方法而言，该方式是显示实现。</p>
	<div><p><strong>参考资料：</strong><a target="_blank" class="w3-link" href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">https://docs.oracle.com/javase/specs/jvms/se8/html/index.html</a></p></div>
</article>