<article>
	<section>
		<div><p><strong>Java 集合类：HashMap 初探</strong></p><p class="w3-right w3-margin-0">2017-05-02</p></div>
		<div style="clear: both;"></div>
		<div><hr style="margin-top: 0;"></div>
		<div class="w3-container w3-light-gray">
			<p><strong>前言：</strong></p>
			<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.)...</P>
			<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于哈希表的 Map 接口的实现，该实现提供所有可选的映射操作，并允许使用 null 值和 null 键。（除了<span class="w3-text-light-green">不支持同步</span>和<span class="w3-text-light-green">允许使用 null 值</span>之外，HashMap 与 Hashtable 大致上是相同的。）……</P>
		</div>
		<div><p></p></div>
		<div class="w3-container w3-light-gray">
			<p><strong>问题：</strong></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="w3-link" onclick="document.getElementById('sec1').scrollIntoView();">1. HashMap 之存储结构？</a></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="w3-link" onclick="document.getElementById('sec2').scrollIntoView();">2. HashMap 之实现原理？</a></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="w3-link" onclick="document.getElementById('sec3').scrollIntoView();">3. HashMap 之哈希映射？</a></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class="w3-link" onclick="document.getElementById('sec4').scrollIntoView();">4. HashMap 之扩容机制？</a></p>
		</div>
	</section>
	<div id="sec1"><p style="height:44px;border:1px solid rgba(255,255,255,0.6);line-height:44px;text-align:center">存储结构</p></div>
	<section>
		<div><p class="w3-text-light-green">一、HashMap 之存储结构：</p></div>
		<div><p>示例代码：</p></div>
		<div class="w3-example">
			<div class="w3-code" style="max-height:300px;overflow-y:auto">
				<pre><code class="hljs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> HashMapAnalyseDemo {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) {
        HashMap&lt;String, Integer&gt; <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();
        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">"北京"</span>, <span class="hljs-number">1</span>);
        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">"上海"</span>, <span class="hljs-number">2</span>);
        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">"广州"</span>, <span class="hljs-number">3</span>);
        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">"深圳"</span>, <span class="hljs-number">4</span>);
        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">"西安"</span>, <span class="hljs-number">5</span>);
        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">"成都"</span>, <span class="hljs-number">6</span>);
        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">"武汉"</span>, <span class="hljs-number">7</span>);
        <span class="hljs-built_in">map</span>.put(<span class="hljs-string">"重庆"</span>, <span class="hljs-number">8</span>);
        <span class="hljs-keyword">for</span> (Entry&lt;String, Integer&gt; entry : <span class="hljs-built_in">map</span>.entrySet()) {
            System.out.println(entry.getKey() + <span class="hljs-string">": "</span> + entry.getValue());
        }
    }
}</code></pre>
		</div>
	</div>
	<div><p>运行结果：</p></div>
	<div class="w3-example">
		<div class="w3-code" style="max-height:300px;overflow-y:auto">
			<pre><code class="hljs">成都: 6
上海: 2
广州: 3
西安: 5
重庆: 8
武汉: 7
北京: 1
深圳: 4</code></pre>
		</div>
	</div>
	<div><p>原因分析：</p></div>
	<div><img class="w3-width" src="src/area_2/articles/0017/images/01.jpg" alt="Oops" /></div>
	<div><p class="w3-white" style="padding:16px"><span class="w3-text-light-green">transient</span> Node&lt;K,V&gt;[] table; <span class="hljs-comment">// transient，简单理解为禁止该属性被序列化。</span></p></div>			
	<div><p>据图分析可知，HashMap 的初始化大小为 16，键值对是以 <span class="w3-text-light-green">Node&lt;K,V&gt; 的实例对象</span>存储在 table 数组里的，然而，示例代码里是放入了 8 组键值对，却只占用了 table 数组的 5 个位置（<span class="w3-text-light-green">[1]、[4]、[11]、[14]、[15]</span>），这是为什么呢？</p></div>
	<div><img class="w3-width" src="src/area_2/articles/0017/images/02.jpg" alt="Oops" /></div>
	<div>
		<div><p></p></div>
		<pre class="w3-white" style="padding:16px">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {
    final int <span class="w3-text-light-green">hash</span>;
    final K <span class="w3-text-light-green">key</span>;
    V <span class="w3-text-light-green">value</span>;
    Node&lt;K,V&gt; <span class="w3-text-light-green">next</span>;
	...
}</pre>
		</div>
		<div><p>展开 table 数组的 <span class="w3-text-light-green">[1]、[4]</span> 节点，不难发现，每个节点都是由 <span class="w3-text-light-green">hash、key、next、value</span> 4 个属性构成，通过对比 <span class="w3-text-light-green">[1]、[4]</span> 节点的 <span class="w3-text-light-green">next</span> 属性值可知，table 数组的节点 <span class="w3-text-light-green">[4]</span> 实际上是存储了两个 <span class="w3-text-light-green">Node&lt;K,V&gt; 的实例对象</span>即<span class="w3-text-light-green">单链表结构</span>，于是再根据当前 table 数组的实际存储情况画出它的存储结构图，如下所示：</p></div>
		<div><img class="w3-width" src="src/area_2/articles/0017/images/03.jpg" alt="Oops" /></div>
		<div><p>最终得出，HashMap 的存储结构如下图所示：</p></div><div>
			<img class="w3-width" src="src/area_2/articles/0017/images/04.jpg" alt="Oops" />
			<p style="text-align:center">Java 7 --- HashMap 之存储结构：<span class="w3-text-light-green">数组 + 单链表</span></p>
		</div>
		<div><p></p></div>
		<div>
			<img class="w3-width" src="src/area_2/articles/0017/images/08.jpg" alt="Oops" />
			<p style="text-align:center">Java 8 --- HashMap 之存储结构：<span class="w3-text-light-green">数组 + 单链表/红黑树</span></p>
		</div>
	</section>
	<div id="sec2"><p style="height:44px;border:1px solid rgba(255,255,255,0.6);line-height:44px;text-align:center">实现原理</p></div>
	<section>
		<div><p class="w3-text-light-green">二、HashMap 之实现原理：</p></div>
		<div><p>众所周知，HashMap 是用来存取键值对数据的，那么对存取数据时使用的 <span class="w3-text-light-green">put 方法</span>和 <span class="w3-text-light-green">get 方法</span>的分析将会是理解 HashMap 之实现原理的关键：</p></div>
		<div><p><span class="w3-text-light-green">put 方法</span>的实现过程如下所示：</p></div>
		<div class="w3-example">
			<div class="w3-code" style="max-height:300px;overflow-y:auto">
				<pre><code class="hljs"><span class="hljs-keyword">public</span> V <span class="hljs-title">put</span>(K key, V <span class="hljs-keyword">value</span>) {
    <span class="hljs-comment">// 对 key.hashCode() 做 rehash</span>
    <span class="hljs-keyword">return</span> putVal(hash(key), key, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>);
}

final V putVal(<span class="hljs-keyword">int</span> hash, K key, V <span class="hljs-keyword">value</span>, boolean onlyIfAbsent,
               boolean evict) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-keyword">int</span> n, i;
    <span class="hljs-comment">// 步骤 1：tab 为空则创建</span>
    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)
        n = (tab = resize()).length;
    <span class="hljs-comment">// 步骤 2：计算 index 并对 null 做处理</span>
    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)
        tab[i] = newNode(hash, key, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">null</span>);
    <span class="hljs-keyword">else</span> {
        Node&lt;K,V&gt; e; K k;
        <span class="hljs-comment">// 步骤 3：节点 key 存在，直接覆盖 value</span>
        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))
            e = p;
        <span class="hljs-comment">// 步骤 4：判断该链为红黑树</span>
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p instanceof TreeNode)
            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, <span class="hljs-keyword">value</span>);
        <span class="hljs-comment">// 步骤 5：该链为链表</span>
        <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) {
                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) {
                    p.next = newNode(hash, key, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">null</span>);
                     <span class="hljs-comment">// 链表长度大于 8 转换为红黑树进行处理</span>
                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span>
                        treeifyBin(tab, hash);
                    <span class="hljs-keyword">break</span>;
                }
                <span class="hljs-comment">// key 已经存在直接覆盖 value</span>
                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))
                    <span class="hljs-keyword">break</span>;
                p = e;
            }
        }
        <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) { <span class="hljs-comment">// existing mapping for key</span>
            V oldValue = e.<span class="hljs-keyword">value</span>;
            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-keyword">null</span>)
                e.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">value</span>;
            afterNodeAccess(e);
            <span class="hljs-keyword">return</span> oldValue;
        }
    }
    ++modCount;
    <span class="hljs-comment">// 步骤 6：超过最大容量就扩容</span>
    <span class="hljs-keyword">if</span> (++size &gt; threshold)
        resize();
    afterNodeInsertion(evict);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
}</code></pre>
		</div>
	</div>
	<div><p></p></div>
	<div class="w3-white" style="padding:8px 16px">
		<div><p>步骤 1. 判断 Node&lt;K,V&gt; 型数组 table 是否为空或为 null，若为空或为 null 则执行 resize() 方法进行扩容；</p></div>
		<div><p>步骤 2. 根据 key 计算 hash 值得到插入 table 数组时的<span class="w3-text-light-green">索引位置 i</span>，如果 table[i] == null，则直接新建节点添加，转向 转向步骤 6，如果 table[i] 不为空，则转向步骤 3；</p></div>
		<div><p>步骤 3. 判断 table[i] 的首个元素的 key 是否和当前 key 一样，如果相同则直接覆盖 value，否则转向步骤 4，这里的相同指的是 hashCode、equals 的比较结果；</p></div>
		<div><p>步骤 4. 判断 table[i] 是否为 treeNode，<span class="w3-text-light-green">即 table[i] 是否为红黑树</span>，如果是红黑树，则直接在树中插入键值对，否则转向步骤 5；</p></div>
		<div><p>步骤 5. 遍历 table[i]，判断链表长度是否大于 8，大于 8 则把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作（遍历过程中若发现 key 已经存在直接覆盖 value 即可）；</p></div>
		<div><p>步骤 6. 插入成功后，判断实际存在的键值对数量 size 是否超多了最大容量 <span class="w3-text-light-green">threshold</span>，如果超过，则进行扩容。</p></div>
	</div>
	<div><p><span class="w3-text-light-green">get 方法</span>的实现过程如下所示：</p></div>
	<div class="w3-example">
		<div class="w3-code" style="max-height:300px;overflow-y:auto">
			<pre><code class="hljs"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span>(Object key) {
    Node&lt;K,V&gt; e;
    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : e.<span class="hljs-keyword">value</span>;
}

final Node&lt;K,V&gt; getNode(<span class="hljs-keyword">int</span> hash, Object key) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-keyword">int</span> n; K k;
    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;
        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-keyword">null</span>) {
        <span class="hljs-comment">// 直接命中</span>
        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; 
            ((k = first.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))
            <span class="hljs-keyword">return</span> first;
        <span class="hljs-comment">// 没有命中</span>
        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-keyword">null</span>) {
            <span class="hljs-comment">// 在红黑树中 get 数据</span>
            <span class="hljs-keyword">if</span> (first instanceof TreeNode)
                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);
            <span class="hljs-comment">// 在单链表中 get 数据</span>
            <span class="hljs-keyword">do</span> {
                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))
                    <span class="hljs-keyword">return</span> e;
            } <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>);
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
}</code></pre>
		</div>
	</div>
	<div><p></p></div>
	<div class="w3-white" style="padding:8px 16px">
		<div><p>步骤 1. 根据 key 计算 hash 值得到查询 table 数组时的<span class="w3-text-light-green">索引位置 i</span>，检查头节点（红黑树或单链表）是否命中，如果命中，则返回 value 值，否则转向步骤 2；</p></div>
		<div><p>步骤 2. 判断头节点（红黑树或单链表）的 next 节点是否为 null，若为 null，则返回 null 值，否则转向步骤 3；</p></div>
		<div><p>步骤 3. 判断<span class="w3-text-light-green">当前查询数据的存储结构</span>是红黑树还是单链表，若存储在红黑树中，则在红黑树中 get 数据，若存储在单链表中，则在单链表中 get 数据。</p></div>
	</div>
	<div><p>通过对 put、get 方法的简要分析，得出 HashMap 之实现原理：</p></div>
	<div><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashMap 主要使用 <span class="w3-text-light-green">hash 方法</span>计算 bucket 的索引位置，使用 put、get 方法存取数据。存储对象时，调用 put 方法并传参 K/V，该方法内部将调用 <span class="w3-text-light-green">hash 方法</span>再计算进而得到存储 bucket 时的索引位置，最终实现数据的存储。获取对象时，调用 get 方法并传参 K/V，该方法内部将调用 <span class="w3-text-light-green">hash 方法</span>再计算进而得到查询 bucket 时的索引位置，最终实现数据的获取。</p></div>
</section>
<div id="sec3"><p style="height:44px;border:1px solid rgba(255,255,255,0.6);line-height:44px;text-align:center">哈希映射</p></div>
<section>
	<div><p class="w3-text-light-green">三、HashMap 之哈希映射：</p></div>
	<div><p>通过对 HashMap 之实现原理的简要分析可知，操作 HashMap 内存储的数据对象时，<span class="w3-text-light-green">hash 方法</span>起着至关重要的作用，那么它的实现原理是什么呢？</p></div>
	<div><img class="w3-width" src="src/area_2/articles/0017/images/05.jpg" alt="Oops" /></div>
	<div><p>根据上图可知，字符串<span style="padding:0 5px" class="w3-light-green">北京</span>即 key 键的<span class="w3-text-light-green">哈希码 679541 </span>经过 put 方法内部调用的 <span class="w3-text-light-green">hash 方法</span>处理之后变更为 <span class="w3-text-light-green">679551</span>，为了验证这个结论，可将 <span class="w3-text-light-green">hash 方法</span>的源码拷贝至 main 方法再执行一下，如下所示：</p></div>
	<div><img class="w3-width" src="src/area_2/articles/0017/images/06.jpg" alt="Oops" /></div>
	<div><p>那么，<span class="w3-text-light-green">hash 方法</span>的内部实现 <span class="w3-text-light-green">(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</span> 是什么意思呢？给出表格如下所示：</p></div>
	<div class="w3-responsive">
		
	</div>
	<div><p>根据上述表格，易于理解 <span class="w3-text-light-green">hash 方法</span>的内部实现，至于它为什么这么实现，博主还是贴出方法源码以及方法注释，仁者见仁，智者见智：</p></div>
	<div class="w3-example">
		<div class="w3-code" style="max-height:300px;overflow-y:auto">
			<pre><code class="hljs">/**
 * Computes key.hashCode() and spreads (XORs) higher bits of hash
 * to lower. Because the table uses power-of-two masking, sets of
 * hashes that vary only in bits above the current mask will
 * always collide. (Among known examples are sets of Float keys
 * holding consecutive whole numbers in small tables.) So we
 * apply a transform that spreads the impact higher bits
 * downward. There is a tradeoff between speed, utility, and
 * quality of bit-spreading. Because many common sets of hashes
 * are already reasonably distributed (so don't benefit from
 * spreading), and because we use trees to handle large sets of
 * collisions in bins, we just XOR some shifted bits in the
 * cheapest possible way to reduce systematic lossage, as well as
 * to incorporate impact of the highest bits that would otherwise
 * never be used in index calculations because of table bounds.
 */
static final int hash(Object key) {
    int h;
<span class="hljs-command">    return</span> (key == null) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);
}</code></pre>
			</div>
		</div>
		<div><p></p></div>
		<div><img class="w3-width" src="src/area_2/articles/0017/images/07.jpg" alt="Oops" /></div>
	</section>
	<div id="sec4"><p style="height:44px;border:1px solid rgba(255,255,255,0.6);line-height:44px;text-align:center">扩容机制</p></div>
	<section>
		<div><p class="w3-text-light-green">四、HashMap 之扩容机制：</p></div>
		<div><p>扩容（resize）就是重新计算存储容量，向 HashMap 里持续添加元素，直到满足<span class="w3-text-light-green">（负载因子）x（容量）&gt;（Map 大小）</span>公式时，就会发生扩容的，扩容过程的描述如下所示：</p></div>
		<div class="w3-white" style="padding:8px 16px">
			<div><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initializes or doubles table size.  If null, allocates in accord with initial capacity target held in field threshold. Otherwise, because we are using power-of-two expansion, <span class="w3-text-light-green">the elements from each bin must either stay at same index, or move with a power of two offset in the new table</span>.（Java 8 源码之 resize 方法的注释）</p></div>
		</div>
		<div><p>这段方法注释究竟是啥意思呢？为答疑解惑，给出表格如下所示：</p></div>
		<div class="w3-responsive">
			<div><p>HashMap 大小为 16：</p></div>
			
		</div>
		<div class="w3-responsive">
			<div><p>HashMap 大小为 32：</p></div>
			
		</div>
		<div><p>根据表格所示，不难得出，当 HashMap 大小由 16 扩容至 32 时，<span class="w3-text-light-green">"北京"</span>在新 bucket 的索引位置为 15 + 16 即 <span style="padding:0 5px" class="w3-light-green">move with a power of two offset</span>，<span class="w3-text-light-green">"上海"</span>在新 bucket 的索引位置为 4 + 0 即 <span style="padding:0 5px" class="w3-light-green">stay at same index</span>，扩容之后索引位置不变。</p></div>
	</section>
	<section>
		<div><p>
			<strong>参考资料：</strong>
			<a style="display:block;overflow:hidden;text-overflow:ellipsis" target="_blank" class="w3-link" href="http://coding-geek.com/how-does-a-hashmap-work-in-java/">http://coding-geek.com/how-does-a-hashmap-work-in-java/</a>
			<a style="display:block;overflow:hidden;text-overflow:ellipsis" target="_blank" class="w3-link" href="https://tech.meituan.com/java-hashmap.html">https://tech.meituan.com/java-hashmap.html</a>
			<a style="display:block;overflow:hidden;text-overflow:ellipsis" target="_blank" class="w3-link" href="http://www.oracle.com/technetwork/cn/articles/maps1-100947-zhs.html">http://www.oracle.com/technetwork/cn/articles/maps1-100947-zhs.html</a>
			<a style="display:block;overflow:hidden;text-overflow:ellipsis" target="_blank" class="w3-link" href="https://www.cs.cmu.edu/~adamchik/15-121/lectures/Hashing/hashing.html">https://www.cs.cmu.edu/~adamchik/15-121/lectures/Hashing/hashing.html</a>
			<a style="display:block;overflow:hidden;text-overflow:ellipsis" target="_blank" class="w3-link" href="https://deepakvadgama.com/blog/java-hashmap-internals/">https://deepakvadgama.com/blog/java-hashmap-internals/</a>
		</p></div>
	</section>
</article>