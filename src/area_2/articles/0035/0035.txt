<article>
	<div><p><strong>Java 并发编程系列：<span class="w3-text-light-green">转载</span> --- JDK1.8 AbstractQueuedSynchronizer 的实现分析（上）</strong></p><p class="w3-right w3-margin-0">2017-12-08</p></div>
	<div style="clear: both;"></div>
	<div><hr style="margin-top: 0;"></div>
	<div class="w3-container w3-light-gray">
		<p><strong>前言：</strong></p>
		<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，ReentrantLock 的功能是实现代码段的并发访问控制，也就是通常意义上所说的锁，在没有看到 AbstractQueuedSynchronizer 之前，你可能会以为它的实现是通过类似于 synchronized，通过给对象加锁来实现的。但事实上，它只是一个工具类，仅是作为一个普普通通的类就完成了代码块的并发访问控制，这就让人疑惑它怎么实现的代码块的并发访问控制的。文中将以 AQS 代替 AbstractQueuedSynchronizer 。</P>
	</div>
	<div><p><strong>转载文章：</strong><a target="_blank" class="w3-link" href="http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer">JDK1.8 AbstractQueuedSynchronizer 的实现分析（上）</a></p></div>
	<div><p><strong>文章作者：</strong><a target="_blank" class="w3-link" href="http://www.infoq.com/cn/profile/%E5%88%98%E9%94%9F%E6%B4%8B">刘锟洋</a></p></div>
	<div><p>在深入分析 AQS 之前，我想先从 AQS 的功能上简单说明一下 AQS，站在使用者的角度，AQS 的功能可以分为两类：独占功能和共享功能，在它的所有子类中，或实现并使用了它独占锁的功能，或使用了共享锁的功能，而不会同时使用两套 API，即便是它最有名的子类 ReentrantReadWriteLock，也是通过两个内部类：读锁和写锁，分别使用两套 API 来实现的，为什么这么做，后面我会再分析，到目前为止，我们只需要明白 AQS 在功能上有<span class="w3-text-light-green">独占控制</span>和<span class="w3-text-light-green">共享控制</span>两种功能即可。</p></div>
	<div><p><span class="w3-text-light-green">独占锁</span></p></div>
	<div><p>在真正解读 AQS 之前，我想先从使用了它独占控制功能的子类 ReentrantLock 说起，分析 ReentrantLock 的同时看一看 AQS 的实现，再推理出 AQS 独特的设计思路和实现方式。最后，再看 AQS 的共享控制功能的实现。</p></div>
	<div><p>对于 ReentrantLock 类，使用过的同学应该都知道，通常是这么用它的：</p></div>
	<div class="w3-custom-code w3-light-gray">
		<pre>reentrantLock.lock();
// do something
reentrantLock.unlock();</pre>
	</div>
	<div><p>ReentrantLock 会保证 do something 在同一时间只有一个线程在执行这段代码，换言之就是，同一时刻只有一个线程的 lock 方法会返回。其余线程会被挂起，直到获取锁。从这里可以看出，其实 ReentrantLock 实现的就是一个独占锁的功能：有且只有一个线程获取到锁，其余线程全部挂起，直到拥有锁的线程释放锁，被挂起的线程被唤醒重新开始竞争锁。没错，ReentrantLock 使用的就是 AQS 的独占 API 实现的。</p></div>
	<div><p>我们就从 ReentrantLock 的实现开始，一起看一下重入锁是怎么实现的：</p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">public void</span> lock() {
	sync.lock();
}</pre>
	</div>
	<div><p>如同 FutureTask（JDK1.6）一样，ReentrantLock 内部有<span class="w3-text-light-green">代理类</span>完成具体操作，ReentrantLock 只是封装了统一的一套 API 而已。值得注意的是，使用过 ReentrantLock 的同学应该知道，ReentrantLock 还分为公平锁和非公平锁，所以，ReentrantLock 内部有两个 Sync 的实现：</p></div>
	<div class="w3-custom-code">
		<pre>/**
 * Sync object for fair locks
 */
<span class="w3-text-coral">static final class</span> FairSync <span class="w3-text-coral">extends</span> Sync {
	...
}

/**
 * Sync object for non-fair locks
 */
<span class="w3-text-coral">static final class</span> NonfairSync <span class="w3-text-coral">extends</span> Sync {
	...
}</pre>
	</div>
	<div><p>公平锁：每个线程抢占锁的顺序为先后调用 lock 方法的顺序依次获取锁，类似于排队吃饭。</p></div>
	<div><p>非公平锁：每个线程抢占锁的顺序不定，谁运气好，谁就获取到锁，与调用 lock 方法的先后顺序无关，类似于堵车时，加塞的那些……</p></div>
	<div><p>到这里，通过 ReentrantLock 的功能和锁的所谓排不排队的方式，我们是否可以这么猜测 ReentrantLock 或 AQS 的实现（现在还不清楚谁去实现这些功能）：有那么一个被 volatile 修饰的标志位叫做 key，用来表示有没有线程拿走了锁，或者说，锁还存不存在，还需要一个线程安全的队列，维护一堆被挂起的线程，以至当锁被归还时，能够通知到这些被挂起的线程，可以来竞争获取锁。</p></div>
	<div><p>至于公平锁和非公平锁，唯一的区别是在获取锁的时候是直接去获取锁，还是进入队列排队的问题。为了验证我们的猜想，我们继续看一下 ReentrantLock 中公平锁的实现：</p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">final void</span> lock() {
	acquire(1); // 调用到了 AQS 的 acquire 方法
}</pre>
	</div>
	<div><p></p></div>
	<div class="w3-custom-code">
		<pre>// AQS 中的 acquire 方法
<span class="w3-text-coral">public final void</span> acquire(<span class="w3-text-coral">int</span> arg) {
	if (!tryAcquire(arg) &amp;&amp;
		acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
		selfInterrupt();
}</pre>
	</div>
	<div><p>从方法的名称上看到的语义是，尝试获取锁，获取不到则创建一个 waiter（当前线程）后放到队列中，这和我们猜测的好像很类似。先看下 tryAcquire 方法：</p></div>
	<div class="w3-custom-code">
		<pre>// AQS 中的 tryAcquire 方法
<span class="w3-text-coral">protected boolean</span> tryAcquire(<span class="w3-text-coral">int</span> arg) {
	<span class="w3-text-coral">throw new</span> UnsupportedOperationException();
}</pre>
	</div>
	<div><p>请留意，Doug Lea 是想留给子类去实现。既然要给子类实现，那么就应该用抽象方法，但是 Doug Lea 没有这么做，原因是 AQS 有两种功能，面向两种使用场景，需要给子类定义的方法都是抽象方法，会导致子类无论如何都需要实现另外一种场景的抽象方法，显而易见，这对子类来说是不友好的。再看一下 FairSync 的 tryAcquire 方法：</p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">protected final boolean</span> tryAcquire(<span class="w3-text-coral">int</span> acquires) {
	<span class="w3-text-coral">final</span> Thread current = Thread.currentThread();
	<span class="w3-text-coral">int</span> c = getState(); // AQS 中的 getState 方法
	if (c == 0) {
		if (!hasQueuedPredecessors() &amp;&amp;
			compareAndSetState(0, acquires)) {
			setExclusiveOwnerThread(current);
			<span class="w3-text-coral">return true</span>;
		}
	}
	else if (current == getExclusiveOwnerThread()) {
		int nextc = c + acquires;
		if (nextc &lt; 0)
			<span class="w3-text-coral">throw new</span> Error("Maximum lock count exceeded");
		setState(nextc);
		<span class="w3-text-coral">return true</span>;
	}
	<span class="w3-text-coral">return false</span>;
}</pre>
	</div>
	<div><p></p></div>
	<div class="w3-custom-code">
		<pre>// AQS 中的代码
/**
 * The synchronization state.
 */
<span class="w3-text-coral">private volatile int</span> state;

/**
 * Returns the current value of synchronization state.
 * This operation has memory semantics of a {@code volatile} read.
 * @return current state value
 */
<span class="w3-text-coral">protected final int</span> getState() {
	<span class="w3-text-coral">return</span> state;
}</pre>
	</div>
	<div><p>事实上，AQS 中的 state 就是前面我们猜想的那个 key 。让我们重新回到 tryAcquire 方法：</p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">protected final boolean</span> tryAcquire(<span class="w3-text-coral">int</span> acquires) {
	<span class="w3-text-coral">final</span> Thread current = Thread.currentThread(); // 获取当前线程
	<span class="w3-text-coral">int</span> c = getState(); // 获取父类 AQS 中的标志位
	if (c == 0) {
		if (!hasQueuedPredecessors() &amp;&amp;
			// 如果队列中没有其它线程，则说明没有线程正在占有锁
			compareAndSetState(0, acquires)) {
			// 修改状态位，注意：acquires 是在 lock 时传进来的，从上述代码可知，这个值是写死的 1
			setExclusiveOwnerThread(current); // AbstractOwnableSynchronizer 中的方法
			// 若 CAS 操作更新状态位成功，则表示当前线程获取锁
			// 因此，将当前线程设置到 AQS 的一个变量中，说明这个线程拿走了锁
			<span class="w3-text-coral">return true</span>;
		}
	}
	else if (current == getExclusiveOwnerThread()) {
		// 如果不为 0 意味着，锁已经被拿走了，但是，因为 ReentrantLock 是重入锁，
		// 是可以重复 lock、unlock 的，这里还要再判断一次占有锁的线程是不是当前请求锁的线程
		int nextc = c + acquires; // 如果是，则累加 state 状态位
		if (nextc &lt; 0)
			<span class="w3-text-coral">throw new</span> Error("Maximum lock count exceeded");
		setState(nextc);
		<span class="w3-text-coral">return true</span>;
	}
	<span class="w3-text-coral">return false</span>;
}</pre>
	</div>
	<div><p>至此，如果获取到锁，tryAcquire 返回 true，反之，返回 false，回到 AQS 的 acquire 方法。如果没有获取到锁，那么，按照我们的描述，应该将当前线程放到队列中去，只不过，在放之前，需要做些包装。先看 addWaiter 方法：</p></div>
	<div class="w3-custom-code">
		<pre>// AQS 中的 addWaiter 方法
<span class="w3-text-coral">private</span> Node addWaiter(Node mode) {
	Node node = <span class="w3-text-coral">new</span> Node(Thread.currentThread(), mode);
	// Try the fast path of enq; backup to full enq on failure
	Node pred = tail;
	<span class="w3-text-coral">if</span> (pred != null) {
		node.prev = pred;
		<span class="w3-text-coral">if</span> (compareAndSetTail(pred, node)) {
			pred.next = node;
			<span class="w3-text-coral">return</span> node;
		}
	}
	enq(node);
	<span class="w3-text-coral">return</span> node;
}</pre>
	</div>
	<div><p>用当前线程去构造一个 Node 对象，mode 是一个表示 Node 类型的字段，仅表示这个结点是独占的，还是共享的，换言之，AQS 的这个队列中，哪些结点是独占的，哪些结点是共享的。</p></div>
	<div><p>这里 lock 调用的是 AQS 独占的 API，当然，可以写死是独占状态的结点。</p></div>
	<div><p>创建好结点后，将结点加入到队列尾部，此处，在队列不为空的时候，先尝试通过 CAS 方式修改尾结点为最新的结点，如果修改失败，意味着有并发，这个时候才会进入 enq 中的死循环，即进入自旋方式修改。</p></div>
	<div><p>将线程的结点接入到队里中后，当然，还需要做一件事：将当前线程挂起，这个由 acquireQueued 来完成。</p></div>
	<div><p>在解释 acquireQueued 之前，我们需要先看一下 AQS 中队列的内部结构，我们知道，队列是由 Node 类型的结点组成，Node 结点中至少有两个变量，一个封装线程，一个封装结点类型。</p></div>
	<div><p>实际上，它的内部结构是这样的（第一次结点插入时，第一个结点是一个空结点，代表有一个线程已经获取锁，事实上，队列的第一个结点就是代表持有锁的结点）：</p></div>
	<div><img class="w3-width" alt="Oops" src="src/area_2/articles/0035/images/01.jpg" /></div>
	<div><p>绿色结点为队列默认的头结点，每次有线程竞争失败，进入队列后，其实都是插入到队列的尾结点（tail）后面。这个从 enq 方法可以看出来，上文中有提到 enq 方法为将结点插入队列的方法：</p></div>
	<div class="w3-custom-code">
		<pre>// AQS 中的 enq 方法
<span class="w3-text-coral">private</span> Node enq(final Node node) {
	<span class="w3-text-coral">for</span> (;;) {
		Node t = tail;
		<span class="w3-text-coral">if</span> (t == null) { // Must initialize
			<span class="w3-text-coral">if</span> (compareAndSetHead(new Node()))
				tail = head;
		} <span class="w3-text-coral">else</span> {
			node.prev = t;
			<span class="w3-text-coral">if</span> (compareAndSetTail(t, node)) {
				t.next = node;
				<span class="w3-text-coral">return</span> t;
			}
		}
	}
}</pre>
	</div>
	<div><p></p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">final boolean</span> acquireQueued(final Node node, int arg) {
	<span class="w3-text-coral">boolean</span> failed = true;
	<span class="w3-text-coral">try</span> {
		<span class="w3-text-coral">boolean</span> interrupted = false;
		<span class="w3-text-coral">for</span> (;;) {
			<span class="w3-text-coral">final</span> Node p = node.predecessor();
			<span class="w3-text-coral">if</span> (p == head &amp;&amp; tryAcquire(arg)) {
				// 如果当前的结点是 head，则说明它是队列中第一个“有效的”结点
				// 因此，尝试获取，上文中有提到这个方法是交给子类去扩展的
				setHead(node); // 成功后，将上图中的绿色结点移除，Node1 变成头结点
				p.next = null; // help GC
				failed = false;
				<span class="w3-text-coral">return</span> interrupted;
			}
			<span class="w3-text-coral">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;
				// 否则，检查前一个结点的状态，看当前获取锁失败的线程是否需要挂起
				parkAndCheckInterrupt())
				// 如果需要，借助 JUC 包下的 LockSupport 类的静态方法 park 挂起当前线程
				// 直至被唤醒
				interrupted = true;
		}
	} <span class="w3-text-coral">finally</span> {
		<span class="w3-text-coral">if</span> (failed) // 如果有异常
			cancelAcquire(node); // 取消请求，对应到队列操作，就是将当前结点从队列中移除
	}
}</pre>
	</div>
	<div><p>这块儿代码有几点需要说明：</p></div>
	<div><p>1. Node 结点中，除了存储当前线程，结点类型，队列中前后元素的变量，还有一个叫 waitStatus 的变量，该变量用于描述结点的状态，为什么需要这个状态呢？</p></div>
	<div><p>原因是，在 AQS 的队列中，并发的情况下，肯定会存取一定数量的结点，每个结点代表了一个线程的状态，有的线程可能<span style="padding:0 5px" class="w3-light-gray">等不及</span>获取锁，需要放弃竞争，退出队列，有的线程在等待以致满足一定条件，满足后才恢复执行（这里的描述很像某个 JUC 包下的工具类，ReentrankLock 的 Condition，事实上，Condition 同样也是 AQS 的子类），总之，各个线程有各个线程的状态，但总需要一个变量来描述它，这个变量就叫 waitStatus，它有四种状态：</p></div>
	<div class="w3-custom-code">
		<pre>/** waitStatus value to indicate thread has cancelled */
<span class="w3-text-coral">static final int</span> CANCELLED =  1;
/** waitStatus value to indicate successor's thread needs unparking */
<span class="w3-text-coral">static final int</span> SIGNAL    = -1; // 结点等待触发
/** waitStatus value to indicate thread is waiting on condition */
<span class="w3-text-coral">static final int</span> CONDITION = -2; // 结点等待条件
/**
 * waitStatus value to indicate the next acquireShared should
 * unconditionally propagate
 */
// 结点状态需要向后传播
<span class="w3-text-coral">static final int</span> PROPAGATE = -3;</pre>
	</div>
	<div><p>只有当前结点的前一个结点为 SIGNAL 时，当前结点才能被挂起。</p></div>
	<div><p>2. 对线程的挂起以及唤醒操作是通过使用 Unsafe 类调用 JNI 方法实现的。当然，还提供了挂起指定时间后再次唤醒的 API，在后面我们会讲到。</p></div>
	<div><p>到此为止，一个线程对于锁的一次竞争才告一段落，结果有两种：（1）成功获取到锁（不用进入到 AQS 队列中）；（2）获取锁失败后被挂起，等待再次唤醒后继续循环尝试获取锁，值得注意的是，AQS 的队列为 FIFO 队列，所以，每次被 CPU 假唤醒，且当前线程不是在头结点的位置，也是会被挂起的，AQS 通过这样的方式实现了竞争的排队策略。</p></div>
	<div><p>理解了获取锁的过程，再看一下释放锁的过程，具体分析代码之前，我们可以先猜测一下，释放锁的操作需要做哪些事情：</p></div>
	<div><p>（1）因为获取锁线程的结点，此时在 AQS 的头结点的位置，所以，可能需要将头结点移除；（2）接着应该是直接释放锁，然后找到 AQS 的下一个结点并作为头结点，通知它可以来竞争锁。</p></div>
	<div><p>是不是这样呢？我们继续向下分析，同样使用 ReentrantLock 的 FairSync 来说明：</p></div>
	<div><p></p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">public void</span> unlock() {
	sync.release(1);
}</pre>
	</div>
	<div><p></p></div>
	<div class="w3-custom-code">
		<pre>// AQS 中的 release 方法
<span class="w3-text-coral">public final boolean</span> release(<span class="w3-text-coral">int</span> arg) {
	<span class="w3-text-coral">if</span> (tryRelease(arg)) {
		Node h = head;
		<span class="w3-text-coral">if</span> (h != null &amp;&amp; h.waitStatus != 0)
			unparkSuccessor(h);
		<span class="w3-text-coral">return true</span>;
	}
	<span class="w3-text-coral">return false</span>;
}</pre>
	</div>
	<div><p>unlock 方法调用了 AQS 的 release 方法，同样传入了参数 1，与获取锁时相对应，获取一个锁，标志位 + 1，释放一个锁，标志位 - 1 。</p></div>
	<div><p>同样，release 为空方法，由子类自己实现逻辑：</p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">protected final boolean</span> tryRelease(int releases) {
	<span class="w3-text-coral">int</span> c = getState() - releases;
	// 如果释放锁的线程和获取锁的线程不是同一个，抛出非法监视器状态异常
	<span class="w3-text-coral">if</span> (Thread.currentThread() != getExclusiveOwnerThread())
		<span class="w3-text-coral">throw new</span> IllegalMonitorStateException();
	<span class="w3-text-coral">boolean</span> free = false;
	// 因为是重入锁
	// 所以，不是每次释放锁，c 都等于 0，直到最后一次释放锁时，才通知 AQS 不需要再记录哪个线程正在占有锁
	<span class="w3-text-coral">if</span> (c == 0) {
		free = true;
		setExclusiveOwnerThread(null);
	}
	setState(c);
	<span class="w3-text-coral">return</span> free;
}</pre>
	</div>
	<div><p>释放锁成功后，找到 AQS 的头结点并唤醒它即可：</p></div>
	<div class="w3-custom-code">
		<pre>// AQS 中的 unparkSuccessor 方法
<span class="w3-text-coral">private void</span> unparkSuccessor(Node node) {
	/*
	 * If status is negative (i.e., possibly needing signal) try
	 * to clear in anticipation of signalling.  It is OK if this
	 * fails or if status is changed by waiting thread.
	 */
	<span class="w3-text-coral">int</span> ws = node.waitStatus;
	<span class="w3-text-coral">if</span> (ws &lt; 0)
		compareAndSetWaitStatus(node, ws, 0);

	/*
	 * Thread to unpark is held in successor, which is normally
	 * just the next node.  But if cancelled or apparently null,
	 * traverse backwards from tail to find the actual
	 * non-cancelled successor.
	 */
	Node s = node.next;
	<span class="w3-text-coral">if</span> (s == null || s.waitStatus &gt; 0) {
		s = null;
		<span class="w3-text-coral">for</span> (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)
			<span class="w3-text-coral">if</span> (t.waitStatus &lt;= 0)
				s = t;
	}
	<span class="w3-text-coral">if</span> (s != null)
		LockSupport.unpark(s.thread);
}</pre>
	</div>
	<div><p>值得注意的是，寻找的顺序是从队列尾部开始往前去找的最前面的一个 waitStatus 小于 0 的节点。到此，ReentrantLock 的 lock、unlock 方法已经基本解析完毕，唯独还剩下一个非公平锁 NonfairSync 没有说，其实，它和公平锁的唯一区别就是获取锁的方式不同，一个是按前后顺序一次获取锁，一个是抢占式的获取锁，那么 ReentrantLock 是怎么实现的呢？再来看两段代码：</p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">static final class</span> NonfairSync <span class="w3-text-coral">extends</span> Sync {
	<span class="w3-text-coral">private static final long</span> serialVersionUID = 7316153563782823691L;

	/**
	 * Performs lock.  Try immediate barge, backing up to normal
	 * acquire on failure.
	 */
	<span class="w3-text-coral">final void</span> lock() {
		<span class="w3-text-coral">if</span> (compareAndSetState(0, 1))
			setExclusiveOwnerThread(Thread.currentThread());
		<span class="w3-text-coral">else</span>
			acquire(1);
	}

	<span class="w3-text-coral">protected final boolean</span> tryAcquire(<span class="w3-text-coral">int</span> acquires) {
		<span class="w3-text-coral">return</span> nonfairTryAcquire(acquires);
	}
}</pre>
	</div>
	<div><p>非公平锁的 lock 方法的处理方式是：在 lock 的时候先直接 CAS 修改一次 state 变量（尝试获取锁），成功就返回，不成功再排队，从而达到不排队直接抢占的目的。</p></div>
	<div class="w3-custom-code">
		<pre><span class="w3-text-coral">static final class</span> FairSync <span class="w3-text-coral">extends</span> Sync {
	<span class="w3-text-coral">private static final long</span> serialVersionUID = -3000897897090466540L;

	<span class="w3-text-coral">final void</span> lock() {
		acquire(1);
	}
	...
}</pre>
	</div>
	<div><p>对于公平锁而言，当前线程则是开始就老老实实地走 AQS 的流程排队获取锁，如果之前有调用过 lock 方法，则排在队列的前面，也就更有机会更早地获取锁，从而达到<span style="padding:0 5px" class="w3-light-gray">公平</span>的目的。</p></div>
	<div><p>最后总结：</p></div>
	<div><p>本篇文章，我们从 ReentrantLock 出发，完整地分析了 AQS 独占功能的 API 以及内部实现，总体而言，思路其实并不复杂，还是使用的标志位 + 队列的方式，记录获取锁、竞争锁、释放锁等一系列独占的状态，AQS 只是维护了一个状态，一个控制各个线程何时可以访问锁的状态，它只对状态负责，而这个状态表示什么含义，则由子类自己来确定。</p></div>
</article>