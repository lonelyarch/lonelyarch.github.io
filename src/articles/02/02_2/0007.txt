<article>
    <header><h3>cookie &amp; session</h3><h4 class="w3-right w3-margin-0"><i class="fa fa-calendar-o"></i> 2017-02-16</h4></header>
    <div style="clear: both;"></div>
    <hr style="margin-top: 0;">
    <div class="w3-panel w3-light-gray" style="border-radius: 10px;">
    	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为什么会有 cookie 和 session ？</p>
    	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在回答该问题之前，我们需要知道什么是 HTTP 协议以及它的基本特点。HTTP 是 WEB 浏览器与服务器交换请求与应答报文的通信协议，它的基本特点有：</p>
    	<ul style="list-style-type: decimal; padding-left: 50px;">
            <li><p>无状态协议</p></li>
            <li><p>非持续连接与持续连接</p></li>
            <li><p>非流水线与流水线</p></li>
        </ul>
        <div class="w3-row w3-light-gray">
        	<div class="w3-col l8">
        		<p style="margin-top: 0;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTTP 协议在传输层使用的是 TCP 协议。如果 WEB 浏览器想访问一个 WEB 服务器，那么客户端的 WEB 浏览器就需要与 WEB 服务器之间建立一个 TCP 连接。浏览器与服务器通过 TCP 连接来发送、接收 HTTP 请求与应答报文。由于考虑到 WEB 服务器可能同时要处理很多浏览器的并发访问，为了提高 WEB 服务器的并发处理能力， 该协议规定 WEB 服务器在接收到浏览器 HTTP 请求报文，返回应答报文之后不保存有关 WEB 浏览器的任何信息。即使是同一个 WEB 浏览器在几秒钟之内两次访问同一个 WEB 服务器，它也必须要分别建立两次 TCP 连接。可见，HTTP 是一种无状态的协议。</p>
        	</div>
        	<div class="w3-col l4">
        		<img src="src/articles/02/02_2/images/0007_1.jpg" style="width: 100%" />
				<div class="w3-center w3-text-black"><p>HTTP 网络协议栈</p></div>
        	</div>
        	<p style="margin-top: 0;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，随着 WEB 应用的不断发展，当客户端与服务器进行动态交互的 WEB 应用程序出现之后，HTTP 协议的无状态性严重阻碍了这些应用程序的实现。例如，用户网购时，客户端与服务器之间需要进行多次交互，也就是需要建立多次 TCP 连接来发送、接收 HTTP 请求与应答报文，但是，由于 HTTP 协议的无状态性，多次交互之间不存在任何关系，很有可能是用户在发送付款请求的时候，服务器已经无法知道该用户购买了什么商品。<span style="color: red;">为了支持客户端与服务器之间的交互，两种用以保持 HTTP 连接状态的技术应运而生，它们就是 cookie 和 session 。</span></p>
        </div>
    </div>
    <div class="w3-panel w3-custom-color" style="border-radius: 10px;">
    	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>cookies 机制：</strong></p>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于 HTTP 是无状态协议，WEB 服务器处理来自客户端的请求，再向客户端回送应答，服务器无法判断该请求是哪个用户发送的，也无法记录来访用户的请求序列。然而，当今的 WEB 应用希望能够提供个性化的服务，它们希望能够对连接在另一端的用户有更多的了解，进而向不同用户提供相应的个性化服务，例如，为某个用户推荐符合他自身喜好的商品。</p>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，即使在 HTTP 协议与生俱来就不具有丰富的识别特性的情况下，早期的 WEB 站点的设计者们也都有自己的用户识别技术，每种技术也都有着各自的优劣：</p>
        <ul style="list-style-type: decimal; padding-left: 50px;">
            <li><p>承载用户身份信息的 HTTP 首部</p></li>
            <li><p>客户端 IP 地址跟踪，通过用户的 IP 地址对当前用户进行识别</p></li>
            <li><p>用户登录，用认证方式来识别用户</p></li>
            <li><p>胖 URL，一种在 URL 中嵌入识别信息的技术</p></li>
        </ul>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些识别技术自身存在很多缺点，于是，cookie 就此产生。cookie 是当前识别用户、实现持久会话的最佳方式，它可与上述各种技术相结合以达到最佳用户识别效果。cookie 的工作过程如下：</p>
        <img alt="cookie 工作流程简易图" src="src/articles/02/02_2/images/0007_2.jpg" style="max-width: 100%; max-height: 100%; padding: 0 30px;">
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由图示可知，用户首次访问 WEB 站点时，WEB 服务器对当前用户一无所知，该 WEB 站点服务器希望这个用户会再次来访，于是就给当前用户回送了独有的 cookie，即在应答时对 cookie 设置了 id 值以标识当前用户的唯一性，当用户再访时，服务器可以用这个 id 值来查找为当前用户积累的数据库信息（购物历史、地址信息等）。注意：cookie 中可以包含任意内容，不局限于 id 值。可笼统地将 cookie 分为<strong>会话 cookie</strong> 和 <strong>持久 cookie</strong>。</p>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器需要做的就是记住从站点服务器回送的 cookie 内容，将它存储到浏览器的 cookie 数据库中，当用户再次访问同一站点时，浏览器会查找出之前存储过的对应站点的 cookie 内容并将它合并至最新的请求报文再传回到站点服务器。</p>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cookie 的基本思想就是让浏览器积累一组服务器特有的信息，当用户每次访问服务器时都将这些信息提供给它。因为浏览器负责存储 cookie 信息，所以该系统被称为客户端侧状态（client-side state）。这个 cookie 规范的正式名称为 HTTP 状态管理机制（HTTP state management mechanism）。</p>
    </div>
    <div class="w3-panel w3-custom-color" style="border-radius: 10px;">
    	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>session 机制：</strong></p>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了使用 cookie 实现持久会话之外，WEB 站点通常也使用 session 来记录客户端状态以达到持久会话的目的。有别于 cookie 的是，session 是服务器端使用的一种记录客户端状态的机制，即它会把客户端信息以类似散列表的数据结构记录在服务器上，这在实现持久会话上是相对简单的，但是，这种机制也增加了服务器的存储压力。</p>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在使用 session 机制的场景，当服务器端程序要为某个客户端的请求创建一个 session（会话）的时候，服务器首先检查这个客户端的请求报文里是否已经包含了一个 session 标识，即就是 session id，如果该请求报文里已经包含了一个 session id，那么，这表示服务器端程序之前已经为该客户端创建过 session（会话），服务器就按照 session id 把这个 session 检索出来使用，如果客户端请求报文里不包含 session id，那么，服务器端程序将为该客户端创建一个 session 再生成一个与此 session 对应的 session id，该 session id 值具有唯一性且不可被仿造，它会在服务器的本次应答中被回送到客户端保存。</p>
        <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保存 session id 的方法通常是使用 cookie，然而，cookie 是可以被人为禁止的，在 cookie 被人为禁止的情况下还能够把 session id 传回服务器的常用技术就是 <strong>URL 重写</strong>，即把 session id 附加在 URL 路径之后，附加方式有两种：作为 URL 路径的附加信息、作为查询字符串。另一种在禁用 cookie 之后还可回传 session id 给服务器的技术称为<strong>表单隐藏字段</strong>，即服务器会自动修改表单，添加一个隐藏字段，以致在表单提交时能够把 session id 传回至服务器。</p>
    	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在谈论 session 机制的时候，通常会有这样一种误解：关闭浏览器之后，session 就消失。事实上，除非有程序通知服务器删除一个 session，否则，在通常情况下，服务器会始终保留着直至服务器停止或重启，程序一般都是在用户退出登录的时候才有可能发删除 session 的指令，然而，浏览器在关闭之前从来不会主动通知服务器它将要关闭，因此，服务器根本不会有机会知道浏览器已经关闭，之所以会有这种误解，是因为大部分 session 机制都使用了<strong>会话 cookie</strong> 来保存 session id，关闭浏览器之后，这个 session id 就会消失，当浏览器再次连接服务器时也就无法找到原来的 session。如果服务器设置的 cookie 被保存到硬盘上或使用某种方法改写浏览器发出的 HTTP 请求报文，把原来的 session id 发送给服务器，那么，当浏览器再次打开并且连接至服务器时还是能够找到原来的 session。</p>
    	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恰是由于关闭浏览器不会导致 session 被删除，才迫使服务器为 session 设置了一个失效时间，当距离客户端前一次使用 session 的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把 session 删除以节省存储空间。</p>
    	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: red;"><strong>特别说明：</strong>本文涉及“session 机制”的相关内容基本来自一个叫<strong>啸笑天</strong>的一篇题目为《session 机制详解》的博文，按照惯例，本文应该引出该篇博文的链接地址，但是，因为承载该篇博文的页面夹杂了丑陋的广告，所以，在多次犹豫之后，本文也终究没有引出该链接地址，纵然这样，该篇博文也不失为一篇佳作。最后，还是想说，这大概就是一个程序猿的强迫症。</span></p>
    </div>
    <br>
	<br>
	<br>
	<a id="toggle-comment-box" class="w3-right" href="javascript:void(0);" onclick="toggleDuoshuoComments(event,'comment-box','02_02_2_0007');" style="color: #428bca; text-decoration: none;">展开评论</a>
	<a id="retract-comment-box" class="w3-right" href="javascript:void(0);" onclick="retractDuoshuoComments(event,'comment-box');" style="color: #428bca; text-decoration: none; display: none;">收起评论</a>
	<div id="comment-box"></div>
</article>