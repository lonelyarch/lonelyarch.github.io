<div class="w3-custom-timeline">
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2018.01.01</h4>
			<p><strong>个人博客改版</strong></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当新年的钟声敲响的时候，屋外的世界是一片欢腾，大街上张灯结彩，人头攒动，快乐的氛围也应该是四处洋溢的，可是，博主却依然坚持了老习惯，深居简出，守在家里写代码，这大概就是程序员的宿命。</p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_3/articles/0003/0003.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.12.16</h4>
			<p><strong>Java 并发编程系列：ReentrantLock 之源码调试（14）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在阅读过同行从业者写的关于 AQS（AbstractQueuedSynchronizer）知识点的博文之后，根据理论加以实践是必不可少的，还是那句话：<span class="w3-text-light-green">纸上得来终觉浅，绝知此事要躬行</span>。</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本篇文章主要是借助 eclipse 开发工具对 JDK1.8 源码之 ReentrantLock 进行调试，以理解基于 AQS 的独占功能的实现过程。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0037/0037.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.12.11</h4>
			<p><strong>Java 并发编程系列：<span class="w3-text-light-green">转载</span> --- JDK1.8 AbstractQueuedSynchronizer 的实现分析（下）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过本系列的上半部分 <a target="_blank" class="w3-link" href="http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer">JDK1.8 AbstractQueuedSynchronizer 的实现分析（上）</a>的解读，相信很多读者对 AbstractQueuedSynchronizer 的独占功能已了然于胸，趁热打铁，这次我们通过对另一个工具类：CountDownLatch 的分析来解读 AQS 的另外一个功能：共享功能。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0036/0036.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.12.08</h4>
			<p><strong>Java 并发编程系列：<span class="w3-text-light-green">转载</span> --- JDK1.8 AbstractQueuedSynchronizer 的实现分析（上）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，ReentrantLock 的功能是实现代码段的并发访问控制，也就是通常意义上所说的锁，在没有看到 AbstractQueuedSynchronizer 之前，你可能会以为它的实现是通过类似于 synchronized，通过给对象加锁来实现的。但事实上，它只是一个工具类，仅是作为一个普普通通的类就完成了代码块的并发访问控制，这就让人疑惑它怎么实现的代码块的并发访问控制的。文中将以 AQS 代替 AbstractQueuedSynchronizer 。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0035/0035.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017-11-13</h4>
			<p><strong>Java 并发编程系列：ThreadLocal（13）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one has its own, independently initialized copy of the variable.</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述英文源自 JDK1.8 官方文档里对 ThreadLocal 的介绍，博主试图这样翻译：</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreadLocal 类用以提供<span class="w3-text-light-green">线程-本地</span>变量，这些<span class="w3-text-light-green">线程-本地</span>变量与它们的常规副本的区别是，每一个线程都只能访问它自身拥有的<span class="w3-text-light-green">线程-本地</span>变量，且该<span class="w3-text-light-green">线程-本地</span>变量独立于变量的初始化拷贝。</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然勉强翻译出了字面意思，但个人对英文源句还是不知所云，没关系，直接给出一个代码示例，通过观察执行结果，疑问将豁然开朗。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0034/0034.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017-11-12</h4>
			<p><strong>Java 并发编程系列：<span class="w3-text-light-green">转载</span> --- 克雷格.兰丁&amp;hagersten (CLH Lock)</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CLH lock is Craig, Landin, and Hagersten (CLH) locks, CLH lock is <span class="w3-text-light-green">a spin lock</span>, can ensure no hunger, provide fairness <span class="w3-text-light-green">first come first service</span>.</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The CLH lock is a scalable, high performance, fairness and spin lock <span class="w3-text-light-green">based on the list</span>, the application thread spin only on a local variable, it constantly polling the precursor state, if it is found that the pre release lock end spin.</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0033/0033.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017-11-09</h4>
			<p><strong>Java 并发编程系列：ConcurrentHashMap 续篇（12）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConcurrentHashMap 初探之后遗留了很多问题，深感 JDK1.8 版本的 ConcurrentHashMap 实现之复杂性，现简要整理一下 CAS（Compare And Swap，即比较并交换）的相关知识点。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0032/0032.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.10.28</h4>
			<p><strong>Java 并发编程系列：ConcurrentHashMap 初探（11）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;记得之前在整理 HashMap 相关知识点的时候，顺带查看了官方文档里对 Hashtable 的描述，于是就看到了以下内容：</P>
				<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... If a thread-safe highly-concurrent implementation is desired, then it is recommended to <span class="w3-text-light-green">use ConcurrentHashMap in place of Hashtable</span>.</p>
				<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实话实说，虽然 HashMap 已烂熟于心，但到目前为止，个人对 <span class="w3-text-light-green">ConcurrentHashMap</span> 这个在 Java 并发编程的世界里早就声名远播的类还是感到十分陌生，这是很难为情的事，为了不偏科，现亡羊补牢。</p>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0031/0031.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.10.22</h4>
			<p><strong>Java 并发编程系列：JDK1.8 中的 HashMap 为什么难以出现死循环（10）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在整理 ConcurrentHashMap 相关知识点时的基本思路是，先列出 HashMap 在并发环境里存在的问题，再引出 ConcurrentHashMap，以不失文章的完整性。原本打算抛出 HashMap 死循环（infinite loop）这个经典问题，但几经折腾之后才意识到，该问题多存在于 JDK1.7 环境，在 JDK1.8 环境下却难以产生，这是为什么？现给出 JDK1.7、JDK1.8 里 HashMap 相关源码的分析过程。</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特别说明：为了维持 <span class="w3-text-gray">Java 并发编程系列</span>的连续性，于是才把该篇文章归在了 <span class="w3-text-gray">Java 并发编程系列</span>。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0030/0030.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.10.13</h4>
			<p><strong>Java 并发编程系列：volatile 关键字（09）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 Java 编程语言里，以 volatile 关键字修饰的变量具有两种特性：1.变量对所有线程可见（<span style="color:#8bc34a">可见性</span>）。2.禁止指令重排序优化（<span style="color:#8bc34a">有序性</span>）。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0029/0029.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.10.07</h4>
			<p><strong>Java 并发编程系列：图文并茂之 hsdis 编译（08）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是 <span style="color:#8bc34a">hsdis(HotSpot Disassembler)</span>？顾名思义，它是个反汇编神器，有想目睹 Java 代码编译之后的汇编模样，那么这款神器是你不可错过的。博主原本是打算从 CSDN 上下载一个 <span style="color:#8bc34a">hsdis-amd64.dll</span>，无奈币值不够，只能自力更生。网上有很多文章也介绍了编译 <span style="color:#8bc34a">hsdis</span> 的所需步骤，但基本都是文字描述，看起来比较费劲。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0028/0028.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.10.03</h4>
			<p><strong>Java 并发编程系列：为什么总是在 while 循环之内调用 wait() 方法？（07）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 Java API 文档里对 Object 类中的 wait() 方法有如下文字描述：</P>
				<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;As in the one argument version, interrupts and spurious wakeups are possible, and <span style="color:#8bc34a">this method should always be used in a loop</span>:</p>
				<pre><code class="hljs w3-light-gray" style="padding:0;overflow:hidden;text-overflow:ellipsis">&nbsp;&nbsp;synchronized (obj) {
    &nbsp;&nbsp;while (&lt;condition does not hold&gt;)
        &nbsp;&nbsp;<apan style="color:#8bc34a">obj.wait();</apan>
    &nbsp;&nbsp;... // Perform action appropriate to condition
&nbsp;&nbsp;}</code></pre>
				<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这就是说，在调用 Object 类中的 wait() 方法的时候，因为中断和伪唤醒（spurious wakeup）可能会发生，所以应该将 wait() 方法置于 while 循环内执行。</p>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0027/0027.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.10.02</h4>
			<p><strong>Java 并发编程系列：synchronized 关键字之重入锁的实现（06）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;什么是重入锁？简而言之，当前线程持有了一个锁对象并且需要再次持有该锁对象，即重复加锁。<span style="color:#8bc34a">ReentrantLock</span> 类是 JDK 实现的重入锁，更加确切地说，该类是实现了公平或非公平策略的可重复加锁机制。对 <span style="color:#8bc34a">ReentrantLock</span> 类的深究不在该篇文章的撰写之内，为学习之目的，自造一个简易的轮子。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0026/0026.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.09.29</h4>
			<p><strong>Java 并发编程系列：synchronized 关键字之死锁（05）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 Java 编程语言里，使用 synchronized 关键字的目的是确保线程安全，但是，如果你的代码写得不完美，那么就有可能导致死锁。谈到死锁，博主最先想到的是经典的<span class="w3-text-red">哲学家就餐问题</span>，这个问题毕竟是在大学课本里出现过。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0025/0025.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.09.27</h4>
			<p><strong>Java 并发编程系列：synchronized 关键字之基本应用示例（04）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在简单了解 synchronized 关键字的基本原理之后再给出基本应用示例是非常必要的，没有实践应用，知识点讲得天花乱坠也只能是纸上谈兵，身为一名合格的程序员的前提就是务实的精神常在。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0024/0024.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.09.26</h4>
			<p><strong>Java 并发编程系列：synchronized 关键字之原理（03）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在概述了 synchronized 关键字因何而来之后，身为一个不折不扣的程序员，为了知其然再知其所以然，是不是需要了解一下它的实现原理？</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0023/0023.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.09.25</h4>
			<p><strong>Java 并发编程系列：synchronized 关键字之起因（02）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;谈及并发编程，进程、线程是不可回避的两点，简而言之，它们是并发编程里的两个基本执行单元，都是为了提升系统的处理能力和资源使用率而存在。在 Java 并发编程里，我们主要涉及线程。有想了解进程、线程详情的童鞋<a target="_blank" class="w3-link" href="https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html">戳这里</a>。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0022/0022.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.09.23</h4>
			<p><strong>Java 并发编程系列：Thread 类（01）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;身为一个以 Java 为主要开发语言的程序员，工作几年了也没有对并发编程这个知识块做过系统性地总结，略表内疚，对不常用的东西要么束之高阁、要么弃之如敝屣，这种处事待物的态度早就习惯了，也就不会过分感觉有所失。从今天起，博主会对 Java 并发编程这个知识块做个相对实用的总结，说服自己的理由是：对并发编程不欣赏的程序员不是个好程序员。</p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;言归正传。虽然网上有很多优秀的同行从业者写了很多有关 Java 并发编程这个知识块的优秀博文，但是，读别人的文章总感觉对事物的认知不够深刻，还是那句话，纸上得来终觉浅，绝知此事要躬行。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0021/0021.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.06.04</h4>
			<p><strong>免费视频短片</strong></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;真诚推荐一款相当有奉献精神的站点 <a target="_blank" href="http://vidlery.com/" class="w3-text-blue" style="text-decoration: none;">http://vidlery.com</a>，该站点提供了可用于页面背景的视频短片，并且它们均遵从 <strong>CC0 1.0</strong> 协议，将这些视频短片嵌入到你的博客主页之后，可以想像你的博客会是多么拉风。</p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_3/articles/0002/0002.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.06.03</h4>
			<p><strong>免费背景音乐</strong></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请不要被这个标题唬住，这里不提供任何背景音乐，博主只能告诉你免费的东西哪里有，之所以打出<strong class="w3-opacity">免费背景音乐</strong>这个幌子，纯粹是因为它独特的文化魅力，任何事物只要和<strong class="w3-opacity">免费</strong>两个字有瓜葛，就有可能引起大家的共鸣，是不是？</p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_3/articles/0001/0001.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.05.27</h4>
			<p><strong>深入理解红黑树（red-black tree）</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前在整理 HashMap 相关知识点的时候，博主就曾碰到过<span class="w3-text-light-green">红黑树</span>，当时浮现在大脑里的树不仅有它，还有哈夫曼树、二叉查找树、B_树，甚至是苹果树，然而，在职场上几经摸爬滚打之后，博主已忘记了这些树原本的模样，真是岁月不饶人。</P>
				<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现打算重温学生时代的记忆和印象，找回过去的那个懂得许多树的我，这么说还是比较浮夸的，从现实出发就是，在将要整理出 TreeMap 知识点的时候，博主又遭遇了 <span class="w3-text-light-green">A Red-Black tree</span>，实属缘分之不易。</p>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0020/0020.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.05.19</h4>
			<p><strong>Java 集合类：LinkedHashMap</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hash table and linked list implementation of the Map interface, with predictable iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running through all of its entries...</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于 Map 接口的哈希表和链表实现，具有可预测的迭代顺序，与 HashMap 的不同之处在于，它对所有的 entry 操作都是基于双向链表完成的（LinkedHashMap&lt;K,V&gt; extends <span class="w3-text-light-green">HashMap&lt;K,V&gt;</span> implements Map&lt;K,V&gt;）……</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0019/0019.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.05.05</h4>
			<p><strong>Java 集合类：HashMap 续篇</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在初探 HashMap 之后尚有很多遗留问题，例如，HashMap 大小为什么是 2 的 n 次方？HashMap 为什么会使用红黑树存储数据？HashMap 死循环是怎样造成的……</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因时间所限，博主挑了一个易于理解的问题简单回答一下，棘手的问题将在适当的时间再次整理。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0018/0018.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.05.02</h4>
			<p><strong>Java 集合类：HashMap 初探</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.)...</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于哈希表的 Map 接口的实现，该实现提供所有可选的映射操作，并允许使用 null 值和 null 键。（除了<span class="w3-text-light-green">不支持同步</span>和<span class="w3-text-light-green">允许使用 null 值</span>之外，HashMap 与 Hashtable 大致上是相同的。）……</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0017/0017.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.04.28</h4>
			<p><strong>grid 使用之 CSS 布局</strong></p>
			<div class="w3-container w3-blue" style="display:flex;justify-content:center;align-items:center;height:132px">
				<p><strong>注意：</strong>以下所有示例基于 <strong>display: grid</strong> 实现</p>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0016/0016.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.04.27</h4>
			<p><strong>flex 使用之 CSS 布局</strong></p>
			<div class="w3-container w3-blue" style="display:flex;justify-content:center;align-items:center;height:132px">
				<p><strong>注意：</strong>以下所有示例基于 <strong>display: flex</strong> 实现</p>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0015/0015.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.04.15</h4>
			<p><strong><span class="w3-text-light-green">转载</span> ---《CSS3 动画卡顿性能优化解决方案》</strong></p>
			<div class="w3-example-02_0014 w3-width">
				<div class="stage">
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
					<div class="layer"></div>
				</div>
			</div>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相信经常使用 CSS3 的 <span class="w3-text-light-green">transform</span>、<span class="w3-text-light-green">transition</span> 以及 <span class="w3-text-light-green">animation</span> 属性实现各种动画效果的童鞋一定遇到过动画卡顿现象，博主曾在《如何实现栅栏式的相册？》一文中给予的示例就遭遇了又卡又顿的情况，现偶然读到一篇诠释这种卡顿现象的好文，受益之后推而广之。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0014/0014.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.04.13</h4>
			<p><strong><span class="w3-text-light-green">转载</span> ---《浏览器的工作原理：新式网络浏览器幕后揭秘》</strong></p>
			<div class="w3-container w3-light-gray">
				<p><strong>前言：</strong></p>
				<div style="float:left;clear:both"><img alt="Oops" src="src/area_2/articles/0013/images/taligarsiel.jpg" style="max-width:100px;border-left:5px solid black;border-right:5px solid black;margin-right:5px" /></div>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a target="_blank" class="w3-link" href="http://taligarsiel.com/">塔利·加希尔</a>是以色列的一名开发人员。她在 2000 年开始从事网络开发工作，逐渐熟悉了 Netscape 的“邪恶”层模型。就像理查德·费曼 (Richard Feynmann) 一样，她极度热衷于探究事物的原理，因此开始深入了解浏览器的内部原理，并记录研究成果。塔利还发表过一篇<a target="_blank" class="w3-link" href="http://taligarsiel.com/ClientSidePerformance.html">关于客户端性能的简短指南</a>。</P>
				<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转载文章<a target="_blank" class="w3-link" href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">《浏览器的工作原理：新式网络浏览器幕后揭秘》</a>，以博主目前在软件开发领域的水平以及个人眼光而言，这是一篇不可多得的深度好文。废话不多讲，时间很宝贵。最后也感谢该篇文章的译者：<a target="_blank" class="w3-link" href="https://twitter.com/_kosei_">@_kosei_</a>。均是素昧平生，只是感谢分享。</P>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0013/0013.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2017.04.03</h4>
			<p><strong>多级下拉式菜单的实现？</strong></p>
			<div><p>废话少说，直接给出示例，再逐步分解实现过程：</p></div>
			<div class="w3-example-multilevel-menu-small">
				<div class="navigation">
					<ul>
						<li class="has-sub">
							<a>Menu 1</a>
							<ul>
								<li>
									<a>Submenu 1.1</a>
									<a>Submenu 1.2</a>
									<a>Submenu 1.3</a>
								</li>
								</li>
							</ul>
						</li>
						<li class="has-sub">
							<a>Menu 2</a>
							<ul>
								<li><a>Submenu 2.1</a></li>
							</ul>
						</li>
						<li class="has-sub">
							<a>Menu 3</a>
							<ul>
								<li><a>Submenu 3.1</a></li>
							</ul>
						</li>
					</ul>
				</div>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0012/0012.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.03.30</h4>
			<p><strong>如何实现圆儿圈式菜单？</strong></p>
			<div><p>废话少说，直接给出示例，再逐步分解实现过程：</p></div>
			<div class="w3-example-3d-circle-menu">
				<nav class="main">
					<input type="checkbox" class="menu-open" id="menu-open" />
					<label class="menu-open-button" for="menu-open">
						<span class="lines line-0"></span>
						<span class="lines line-1"></span>
						<span class="lines line-2"></span>
					</label>
					<a class="menu-item">风景</a>
					<a class="menu-item">文化</a>
					<a class="menu-item">美食</a>
					<a class="menu-item">摄影</a>
					<a class="menu-item">工作</a>
					<a class="menu-item">热情</a>
				</nav>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0011/0011.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.03.29</h4>
			<p><strong>立体式可旋转的菜单实现</strong></p>
			<div><p>废话少说，直接给出示例，再逐步分解实现过程：</p></div>
			<div class="w3-example-3d-rotate-menu-small">
				<nav class="main">
					<ul>
						<li><a class="w3-example-3d-rotate-menu-small-a" data-title="漫川古镇">漫川古镇</a></li>
						<li><a class="w3-example-3d-rotate-menu-small-a" data-title="山水相依">山水相依</a></li>
						<li><a class="w3-example-3d-rotate-menu-small-a" data-title="风景独好">风景独好</a></li>
					</ul>
				</nav>
				<script>
					var arr = document
							.getElementsByClassName("w3-example-3d-rotate-menu-small-a");
					for (var i = 0; i < arr.length; i++) {
						(function(i) {
							arr[i].onmouseover = function() {
								arr[i].style.transform = "rotateY(-90deg) translate3d(-50%,0,"
										+ (arr[i].offsetWidth / 2)
										+ "px)";
							};
							arr[i].onmouseout = function() {
								arr[i].style.transform = "";
							};
						})(i);
					}
				</script>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0010/0010.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.03.26</h4>
			<p><strong>多种效果下拉式菜单实现</strong></p>
			<div><p>废话少说，直接给出示例，再逐步分解实现过程：</p></div>
			<div class="w3-example-dropdown-menu-small">
				<nav>
					<ul class="main">
						<li>
							<a>首页</a>
							<ul class="drop menu-1">
								<li><a>首页</a></li>
								<li><a>影视</a></li>
								<li><a>随笔</a></li>
							</ul>
						</li>
						<li>
							<a>影视</a>
							<ul class="drop menu-2">
								<li><a>首页</a></li>
								<li><a>影视</a></li>
								<li><a>随笔</a></li>
							</ul>
						</li>
						<li>
							<a>美丽人生</a>
							<ul class="drop menu-3">
								<li><a>国家宝藏</a></li>
								<li><a>霸王别姬</a></li>
								<li><a>阿甘正传</a></li>
							</ul>
						</li>
					</ul>
				</nav>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0009/0009.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.03.20</h4>
			<p><strong>纯手工制作：法式马卡龙</strong></p>
			<div><p>废话少说，直接给出示例，再逐步分解实现过程：</p></div>
			<div class="w3-example-macarons-small"><div></div></div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0008/0008.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.03.19</h4>
			<p><strong>如何实现旋转式太极图？</strong></p>
			<div><p>废话少说，直接给出示例，再逐步分解实现过程：</p></div>
			<div class="w3-example-taichi">
				<img style="border-radius:50%;max-width:60rem;width:100%" alt="Oops" src="src/area_2/articles/0007/images/01.jpg" />
				<div class="w3-example-taichi-l">
					<div class="w3-example-taichi-l-dot"></div>
				</div>
				<div class="w3-example-taichi-r">
					<div class="w3-example-taichi-r-dot"></div>
				</div>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0007/0007.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.03.18</h4>
			<p><strong>如何实现栅栏式的相册？</strong></p>
			<p>废话少说，直接给出示例，再逐步分解实现过程：</p>
			<div>
				<div class="w3-example-album">
					<div class="w3-example-album-item">
						<div class="w3-example-album-item-bg"></div>
						<div class="w3-example-album-item-close-btn"></div>
					</div>
					<div class="w3-example-album-item">
						<div class="w3-example-album-item-bg"></div>
						<div class="w3-example-album-item-close-btn"></div>
					</div>
					<div class="w3-example-album-item">
						<div class="w3-example-album-item-bg"></div>
						<div class="w3-example-album-item-close-btn"></div>
					</div>
					<div class="w3-example-album-item">
						<div class="w3-example-album-item-bg"></div>
						<div class="w3-example-album-item-close-btn"></div>
					</div>
					<div class="w3-example-album-item">
						<div class="w3-example-album-item-bg"></div>
						<div class="w3-example-album-item-close-btn"></div>
					</div>
				</div>
				<script>
				var items = [].slice.call(document.querySelectorAll(".w3-example-album-item"));
				items.forEach(function(item) {
					item.addEventListener("click", function() {
						if (this.classList.contains("dynamic")) return;
						this.classList.add("dynamic");
						for(let i=0; i<items.length; i++) {
							if(items[i] == this) continue;
							items[i].classList.add("forhide");
						}
					});
				});
				var butns = [].slice.call(document.querySelectorAll(".w3-example-album-item-close-btn"));
				butns.forEach(function(butn) {
					butn.addEventListener("click", function(e) {
						e.stopPropagation();
						document.querySelector(".w3-example-album-item.dynamic").classList.remove("dynamic");
						for(let i=0; i<items.length; i++) {
							items[i].classList.remove("forhide");
						}
					});
				});
			</script>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0006/0006.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2017.03.11</h4>
			<p><strong>如何实现立体式的按钮（3D Button）？</strong></p>
			<p>废话少说，直接给出示例，再逐步分解实现过程：</p>
			<div class="w3-panel w3-white w3-width" style="padding:0;text-align:center">
				<div class="w3-row">
					<button class="w3-example-button-x" title="w3-example-button"></button>
				</div>
				<div class="w3-row">
					<button class="w3-example-button-y" title="w3-example-button"></button>
				</div>
				<div class="w3-row">
					<button class="w3-example-button-z" title="w3-example-button"></button>
				</div>
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0005/0005.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2016.10.19</h4>
			<p><strong>如何实现一枚旋转的针？</strong></p>
			<p>废话少说，直接给出示例，再逐步分解实现过程（标题里的针代表的是秒针，象征了博主此时此刻对时间的认知）：</p>
			<div class="w3-example-circle" style="margin:0 auto;position:relative;max-width:300px;width:100%">
				<img style="border-radius:50%;max-width:60rem;width:100%" alt="Oops" src="src/area_2/articles/0004/images/01.jpg" />
				<span style="position:absolute;top:0;left:0;width:100%;height:100%;background-color:#8bc34a;border-radius:50%"></span>
				<hr style="position:absolute;top:50%;width:50%;margin:0" />
			</div>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0004/0004.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-left">
		<div class="w3-custom-content">
			<h4>2016.10.17</h4>
			<p><strong>如何实现淡入淡出效果？</strong></p>
			<p>废话少说，直接给出示例，再逐步分解实现过程：</p>
			<div class="w3-example" style="padding: 0; border: 0; background-color: black;">
				<img class="w3-width" alt="Oops" src="https://www.wailian.work/images/2018/01/26/0033.jpg" />
			</div>
			<p><strong>特别说明：</strong>该图出自 <a target="_blank" href="https://unsplash.com/" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">https://unsplash.com</a>，作者为<a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;display:inline-block;border-radius:3px;" href="https://unsplash.com/@zanonluca?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Luca Zanon"><span style="display:inline-block;padding:2px 3px;"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white;" viewBox="0 0 32 32"><title>unsplash-logo</title><path d="M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z"></path></svg></span><span style="display:inline-block;padding:2px 3px;">Luca Zanon</span></a>，有想知悉 <strong>license</strong> 的童鞋<a target="_blank" href="https://unsplash.com/license" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">戳这里</a>。因现实需要，博主对原图有裁剪、压缩。</p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0003/0003.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2016.09.14</h4>
			<p><strong>Apache Tomcat 8 之源码调试续篇</strong></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;步骤一、新建一个 Web 工程（Dynamic Web Project），在 src 目录下新建 HelloWorld.java 文件：</p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0002/0002.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
	<div class="w3-custom-container w3-custom-right">
		<div class="w3-custom-content">
			<h4>2016.09.13</h4>
			<p><strong>Apache Tomcat 8 之源码编译、安装及调试</strong></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;步骤一、JDK、Ant 的安装请参考其他教程。本次 Tomcat 8.0.37 源码编译使用的 JDK、Ant 版本如下所示：</p>
			<p><img class="w3-width" src="https://www.wailian.work/images/2018/01/23/0001.jpg" alt="Oops" /></p>
			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……</p>
			<p style="text-align: right;"><a onclick="fetch([{url:'src/area_2/articles/0001/0001.txt',id:'contents'}]);" class="w3-text-blue" style="text-decoration: none; cursor: pointer;">继续阅读 »</a></p>
		</div>
	</div>
</div>