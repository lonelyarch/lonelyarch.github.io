<article>
	<div><header class="w3-header"><p>[LeetCode] String to Integer (atoi) 字符串转为整数</p></header></div>
	<div><p>Implement atoi to convert a string to an integer.</p></div>
	<div><p>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p></div>
	<div><p>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p></div>
	<div><p class="w3-text-red">Update (2015-02-10):</p></div>
	<div><p>The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button  to reset your code definition.</p></div>
	<div><p><a target="_blank" class="w3-link" href="https://leetcode.com/problems/string-to-integer-atoi/">spoilers alert... click to show requirements for atoi.</a></p></div>
	<div><p>Requirements for atoi:</p></div>
	<div><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p></div>
	<div><p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p></div>
	<div><p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p></div>
	<div><p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p></div>
	<div class="w3-custom-code w3-lightslategray"><pre>public class LC0008 {

	public static int func(String str) {
		if (null == str || str.trim().isEmpty())
			return 0;
		int sign = 1, base = 0, i = 0, n = str.length();
		while (i &lt; n &amp;&amp; str.charAt(i) == ' ')
			++i;
		if (str.charAt(i) == '+' || str.charAt(i) == '-') {
			sign = (str.charAt(i++) == '+') ? 1 : -1;
		}
		while (i &lt; n &amp;&amp; str.charAt(i) &gt;= '0' &amp;&amp; str.charAt(i) &lt;= '9') {
			if (base &gt; Integer.MAX_VALUE / 10
					|| (base == Integer.MAX_VALUE / 10 &amp;&amp; str.charAt(i) - '0' &gt; 7)) {
				return (sign == 1) ? Integer.MAX_VALUE : Integer.MIN_VALUE;
			}
			base = 10 * base + (str.charAt(i++) - '0');
		}
		return base * sign;
	}

	public static void main(String[] args) {
		int res = func("18.888888888888");
		System.out.println("res: " + res);
	}
}</pre></div>
</article>