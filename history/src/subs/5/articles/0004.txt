<article>
	<div>
		<header class="w3-header">
			<p>[LeetCode] Median of Two Sorted Arrays 两个有序数组的中位数</p>
		</header>
	</div>
	<div>
		<p>There are two sorted arrays nums1 and nums2 of size m
			and n respectively. Find the median of the two sorted arrays.
			The overall run time complexity should be O(log (m+n)).</p>
	</div>
	<div class="w3-custom-code w3-lightslategray">
		<pre>import java.util.Arrays;

public class LC0004 {

	public static double func(int[] nums1, int[] nums2) {
		int m = nums1.length, n = nums2.length, left = (m + n + 1) / 2, right = (m
				+ n + 2) / 2;
		return (find(nums1, nums2, left) + find(nums1, nums2, right)) / 2.0;
	}

	public static int find(int[] nums1, int[] nums2, int k) {
		int m = nums1.length, n = nums2.length;
		if (m &gt; n)
			return find(nums2, nums1, k);
		if (m == 0)
			return nums2[k - 1];
		if (k == 1)
			return Math.min(nums1[0], nums2[0]);
		int i = Math.min(m, k / 2), j = Math.min(n, k / 2);
		if (nums1[i - 1] &gt; nums2[j - 1]) {
			return find(nums1, <span class="w3-text-white">Arrays.copyOfRange(nums2, j, n)</span>, k - j);
		} else {
			return find(<span class="w3-text-white">Arrays.copyOfRange(nums1, i, m)</span>, nums2, k - i);
		}
	}

	public static void main(String[] args) {
		int[] nums1 = { 1, 3, 6, 7, 12, 17, 32 };
		int[] nums2 = { 22, 56, 78 };
		double res = func(nums1, nums2);
		System.out.println("res: " + res);
	}
}</pre>
	</div>
	<div class="w3-custom-code w3-lightslategray">
		<pre>public class LC0004 {

	public static double func(int[] nums1, int[] nums2) {
		int m = nums1.length, n = nums2.length;
		if (m &lt; n)
			return func(nums2, nums1);
		if (n == 0)
			return (nums1[(m - 1) / 2] + nums1[m / 2]) / 2.0;
		int left = 0, right = 2 * n;
		while (left &lt;= right) {
			int mid2 = (left + right) / 2;
			int mid1 = m + n - mid2;
			double L1 = mid1 == 0 ? Double.MIN_VALUE : nums1[(mid1 - 1) / 2];
			double L2 = mid2 == 0 ? Double.MIN_VALUE : nums2[(mid2 - 1) / 2];
			double R1 = mid1 == m * 2 ? Double.MAX_VALUE : nums1[mid1 / 2];
			double R2 = mid2 == n * 2 ? Double.MAX_VALUE : nums2[mid2 / 2];
			if (L1 &gt; R2)
				left = mid2 + 1;
			else if (L2 &gt; R1)
				right = mid2 - 1;
			else
				return (Math.max(L1, L2) + Math.min(R1, R2)) / 2;
		}
		return -1.0;
	}

	public static void main(String[] args) {
		int[] nums1 = { 1, 3, 6, 7, 12, 17, 32 };
		int[] nums2 = { 22, 56, 78 };
		double res = func(nums1, nums2);
		System.out.println("res: " + res);
	}
}</pre>
	</div>
</article>