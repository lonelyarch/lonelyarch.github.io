<article>
	<div><header class="w3-header"><p>[LeetCode] Regular Expression Matching 正则表达式匹配</p></header></div>
	<div><p>Implement regular expression matching with support for '.' and '*'.</p></div>
	<div><p>'.' Matches any single character.</p></div>
	<div><p>'*' Matches zero or more of the preceding element.</p></div>
	<div><p>The matching should cover the entire input string (not partial).</p></div>
	<div><p>The function prototype should be:</p></div>
	<div><p>bool isMatch(const char *s, const char *p)</p></div>
	<div><p>Some examples:</p></div>
	<div><pre style="overflow:auto">isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true</pre></div>
								<div class="w3-custom-code w3-lightslategray"><pre>public class LC0010 {

	public static boolean func(String s, String p) {
		if (p.length() == 0)
			return s.length() == 0;
		if (p.length() == 1 || p.charAt(1) != '*') {
			if (s.length() &lt; 1
					|| (p.charAt(0) != '.' &amp;&amp; s.charAt(0) != p.charAt(0)))
				return false;
			return func(s.substring(1), p.substring(1));
		} else {
			int len = s.length();
			int i = -1;
			while (i &lt; len
					&amp;&amp; (i &lt; 0 || p.charAt(0) == '.' || p.charAt(0) == s
							.charAt(i))) {
				if (func(s.substring(i + 1), p.substring(2)))
					return true;
				i++;
			}
			return false;
		}
	}

	public static void main(String[] args) {
		boolean res = func("aab", "c*a*b");
		System.out.println("res: " + res);
	}
}</pre></div>
</article>