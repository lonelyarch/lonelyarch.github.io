<article>
	<div><header class="w3-header"><p></p></header></div>
	<div><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p></div>
	<div><p>Note:</p></div>
	<div><ul>
		<li>Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c);</li>
		<li>The solution set must not contain duplicate triplets.</li>
	</ul></div>
	<div><pre style="overflow:auto">    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)</pre></div>
	<div class="w3-custom-code w3-lightslategray"><pre>public class LC0015 {

	public static List&lt;List&lt;Integer&gt;&gt; func(int[] nums) {

		List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;List&lt;Integer&gt;&gt;();

		if (nums == null || nums.length &lt; 3)
			return result;

		Arrays.sort(nums);

		for (int i = 0; i &lt; nums.length - 2; i++) {
			if (i == 0 || nums[i] &gt; nums[i - 1]) {
				int j = i + 1;
				int k = nums.length - 1;

				while (j &lt; k) {
					if (nums[i] + nums[j] + nums[k] == 0) {
						List&lt;Integer&gt; l = new ArrayList&lt;Integer&gt;();
						l.add(nums[i]);
						l.add(nums[j]);
						l.add(nums[k]);
						result.add(l);

						j++;
						k--;

						// handle duplicate here
						while (j &lt; k &amp;&amp; nums[j] == nums[j - 1])
							j++;
						while (j &lt; k &amp;&amp; nums[k] == nums[k + 1])
							k--;

					} else if (nums[i] + nums[j] + nums[k] &lt; 0) {
						j++;
					} else {
						k--;
					}
				}
			}
		}
		return result;
	}

	public static void main(String[] args) {
		int[] nums = { -1, 0, 1, 2, -1, -4 };
		List&lt;List&lt;Integer&gt;&gt; res = func(nums);
		System.out.println("res: " + res.toString());
	}
}</pre></div>
</article>