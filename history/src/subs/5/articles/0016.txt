<article>
	<div><header class="w3-header"><p>[LeetCode] 3Sum Closest 最近三数之和</p></header></div>
	<div><p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p></div>
	<div><pre style="overflow:auto">    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</pre></div>
	<div class="w3-custom-code w3-lightslategray"><pre>import java.util.Arrays;

public class LC0016 {

	public static int func(int[] nums, int target) {

		int min = Integer.MAX_VALUE;
		int result = 0;

		Arrays.sort(nums);
		for (int i = 0; i &lt; nums.length; i++) {
			int j = i + 1;
			int k = nums.length - 1;
			while (j &lt; k) {
				int sum = nums[i] + nums[j] + nums[k];
				int diff = Math.abs(sum - target);
				if (diff == 0)
					return sum;
				if (diff &lt; min) {
					min = diff;
					result = sum;
				}
				if (sum &lt;= target) {
					j++;
				} else {
					k--;
				}
			}
		}

		return result;
	}

	public static void main(String[] args) {
		int[] nums = { -1, 2, 1, -4 };
		int target = 1;
		int res = func(nums, target);
		System.out.println("res: " + res);
	}
}</pre></div>
</article>