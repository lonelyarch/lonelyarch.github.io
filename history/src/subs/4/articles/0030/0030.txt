<article>
	<div><header class="w3-header"><p>Java NIO 系列：Pipe（07）</p></header></div>
	<div><p>Java NIO 管道是 2 个线程之间的<span class="w3-text-light-green">单向数据连接</span>。Pipe 有一个 source 通道和一个 sink 通道。数据会被写到 sink 通道，从 source 通道读取。</p></div>
	<div><p>这里是 Pipe 原理的图示：</p></div>
	<div style="text-align:center"><img alt="Oops" src="src/subs/4/articles/0030/images/pipe.jpg" /></div>
	<div><p><strong>创建管道</strong></p></div>
	<div><p>通过 Pipe.open() 方法打开管道。例如：</p></div>
	<div class="w3-custom-code"><pre>Pipe pipe = Pipe.open();</pre></div>
	<div><p></p><strong>向管道写数据</strong></div>
	<div><p>要向管道写数据，需要访问 sink 通道。像这样：</p></div>
	<div class="w3-custom-code"><pre>Pipe.SinkChannel sinkChannel = pipe.sink();</pre></div>
	<div><p>通过调用 SinkChannel 的 write() 方法，将数据写入 SinkChannel，像这样：</p></div>
	<div class="w3-custom-code"><pre>String newData = "New String to write to file..." + System.currentTimeMillis();
ByteBuffer buf = ByteBuffer.allocate(512);
buf.clear();
buf.put(newData.getBytes());
buf.flip();
while(buf.hasRemaining()) {
    sinkChannel.write(buf);
}</pre></div>
	<div><p><strong>从管道读取数据</strong></p></div>
	<div><p>从管道读取数据，需要访问 source 通道，像这样：</p></div>
	<div class="w3-custom-code"><pre>Pipe.SourceChannel sourceChannel = pipe.source();</pre></div>
	<div><p>调用 source 通道的 read() 方法来读取数据，像这样：</p></div>
	<div class="w3-custom-code"><pre>ByteBuffer buf = ByteBuffer.allocate(512);
int bytesRead = sourceChannel.read(buf);</pre></div>
	<div><p>read() 方法返回的 int 值会告诉我们多少字节被读进了缓冲区。</p></div>
</article>