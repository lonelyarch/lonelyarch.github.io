<article>
	<div><header class="w3-header"><p>Spring AOP 的实现原理</p></header></div>
	<div><p>AOP（Aspect Oriented Programming）<samp>，</samp>我们一般称之为面向切面编程<samp>，</samp>它是作为面向对象的一种补充<samp>，</samp>用于处理系统中分布于各个模块的横切关注点<samp>，</samp>例如<samp>，</samp>事务管理、日志、缓存。AOP 实现的关键在于 AOP 框架自动创建的 AOP 代理<samp>，</samp>AOP 代理主要分为静态代理和动态代理<samp>，</samp>静态代理的代表为 AspectJ<samp>；</samp>而动态代理则以 Spring AOP 为代表。</p></div>
	<div><p><strong>使用 AspectJ 的编译时增强实现 AOP</strong></p></div>
	<div><p>AspectJ 是静态代理的增强<samp>，</samp>所谓的静态代理就是 AOP 框架会在编译阶段生成 AOP 代理类<samp>，</samp>因此也称为编译时增强。</p></div>
	<div><p>举例说明：</p></div>
	<div class="w3-custom-code"><pre>public class Hello {
    public void sayHello() {
        System.out.println("hello");
    }
 
    public static void main(String[] args) {
        Hello h = new Hello();
        h.sayHello();
    }
}</pre></div>
	<div><p>使用 AspectJ 编写一个 Aspect：</p></div>
	<div class="w3-custom-code"><pre>public aspect TxAspect {
    void around():call(void Hello.sayHello()){
        System.out.println("开始事务 ...");
        proceed();
        System.out.println("事务结束 ...");
    }
}</pre></div>
	<div><p>这里模拟了一个事务的场景<samp>，</samp>类似于 Spring 的声明式事务。使用 AspectJ 的编译器编译：</p></div>
	<div class="w3-custom-code"><pre>ajc -d . Hello.java TxAspect.aj</pre></div>
	<div><p>编译完成之后再运行这个 Hello 类<samp>，</samp>可以看到以下输出：</p></div>
	<div class="w3-custom-code w3-white"><pre>开始事务 ...
hello
事务结束 ...</pre></div>
	<div><p>显然<samp>，</samp>AOP 已经生效了<samp>，</samp>那么究竟 AspectJ 是如何在没有修改 Hello 类的情况下为 Hello 类增加新功能的呢？</p></div>
	<div><p>查看一下编译后的 Hello.class：</p></div>
	<div class="w3-custom-code"><pre>public class Hello {
								
    public Hello() {
    }
 
    public void sayHello() {
        System.out.println("hello");
    }
 
    public static void main(String[] args) {
        Hello h = new Hello();
        sayHello_aroundBody1$advice(h, TxAspect.aspectOf(), (AroundClosure)null);
    }
}</pre></div>
	<div><p>可以看到<samp>，</samp>这个类比原来的 Hello.java 多了一些代码<samp>，</samp>这就是 AspectJ 的静态代理<samp>，</samp>它会在编译阶段将 Aspect 织入 Java 字节码中<samp>，</samp> 运行的时候就是经过增强之后的 AOP 对象。</p></div>
	<div class="w3-custom-code"><pre>public void ajc$around$com_listenzhangbin_aop_TxAspect$1$f54fe983(AroundClosure ajc$aroundClosure) {
    System.out.println("开始事务 ...");
    ajc$around$com_listenzhangbin_aop_TxAspect$1$f54fe983<span class="w3-text-white">proceed</span>(ajc$aroundClosure);
    System.out.println("事务结束 ...");
}</pre></div>
	<div><p>从 Aspect 编译后的 class 文件可以更明显的看出执行的逻辑。proceed 方法就是回调执行被代理类中的方法。</p></div>
	<div><p><strong>使用 Spring AOP</strong></p></div>
	<div><p>与 AspectJ 的静态代理不同<samp>，</samp>Spring AOP 使用的动态代理<samp>，</samp>所谓的动态代理就是说 AOP 框架不会去修改字节码<samp>，</samp>而是在内存中临时为方法生成一个 AOP 对象<samp>，</samp>这个 AOP 对象包含了目标对象的全部方法<samp>，</samp>并且在特定的切点做了增强处理<samp>，</samp>并回调原对象的方法。</p></div>
	<div><p>Spring AOP 中的动态代理主要有两种方式<samp>，</samp>JDK 动态代理和 CGLIB 动态代理。JDK 动态代理通过<span class="w3-text-light-green">反射</span>来接收被代理的类<samp>，</samp>并且要求<span class="w3-text-light-green">被代理的类必须实现一个接口</span>。JDK 动态代理的核心是 InvocationHandler 接口和 Proxy 类。</p></div>
	<div><p>如果目标类没有实现接口<samp>，</samp>那么 Spring AOP 会选择使用 CGLIB 来动态代理目标类。CGLIB（Code Generation Library）<samp>，</samp>是一个代码生成的类库<samp>，</samp>可以在运行时动态的生成某个类的子类<samp>，</samp>注意<samp>，</samp>CGLIB 是通过<span class="w3-text-light-green">继承</span>的方式做的动态代理<samp>，</samp>因此如果某个类被标记为 final<samp>，</samp>那么它是无法使用 CGLIB 做动态代理的。</p></div>
	<div><p>为了验证以上的说法<samp>，</samp>可以做一个简单的测试。首先测试实现接口的情况：</p></div>
	<div><p>定义一个接口</p></div>
	<div class="w3-custom-code"><pre>public interface Person {
    String sayHello(String name);
}</pre></div>
	<div><p>实现类</p></div>
	<div class="w3-custom-code"><pre>@Component
public class Chinese implements Person {
    @Timer
    @Override
    public String sayHello(String name) {
        System.out.println("-- sayHello() --");
        return name + " hello, AOP";
    }
 
    public void eat(String food) {
        System.out.println("我正在吃：" + food);
    }
}</pre></div>
	<div><p>这里的 @Timer 注解是我自己定义的一个普通注解<samp>，</samp>用来标记 Pointcut。</p></div>
	<div><p>定义 Aspect</p></div>
	<div class="w3-custom-code"><pre>@Aspect
@Component
public class AdviceTest {
 
    @Pointcut("@annotation(com.listenzhangbin.aop.Timer)")
    public void pointcut() {
    }
 
    @Before("pointcut()")
    public void before() {
        System.out.println("before");
    }
}</pre></div>
	<div><p>运行</p></div>
	<div class="w3-custom-code"><pre>@SpringBootApplication
@RestController
public class SpringBootDemoApplication {
 
    //这里必须使用 Person 接口做注入
    @Autowired
    private Person chinese;
 
    @RequestMapping("/test")
    public void test() {
        chinese.sayHello("listen");
        System.out.println(chinese.getClass());
    }
 
    public static void main(String[] args) {
        SpringApplication.run(SpringBootDemoApplication.class, args);
    }
}</pre></div>
	<div><p>输出</p></div>
	<div class="w3-custom-code w3-white"><pre>before
-- sayHello() --
class com.sun.proxy.$Proxy53</pre></div>
	<div><p>可以看到类型是 com.sun.proxy.$Proxy53<samp>，</samp>也就是前面提到的 Proxy 类<samp>，</samp>因此这里 Spring AOP 使用了 JDK 的动态代理。</p></div>
	<div><p>再来看看不实现接口的情况<samp>，</samp>修改 Chinese 类：</p></div>
	<div class="w3-custom-code"><pre>@Component
public class Chinese {
 
    @Timer
    // @Override
    public String sayHello(String name) {
        System.out.println("-- sayHello() --");
        return name + " hello, AOP";
    }
 
    public void eat(String food) {
        System.out.println("我正在吃：" + food);
    }
}</pre></div>
	<div><p>运行</p></div>
	<div class="w3-custom-code"><pre>@SpringBootApplication
@RestController
public class SpringBootDemoApplication {
 
    // 直接用Chinese类注入
    @Autowired
    private Chinese chinese;
 
    @RequestMapping("/test")
    public void test() {
        chinese.sayHello("listen");
        System.out.println(chinese.getClass());
    }
 
    public static void main(String[] args) {
        SpringApplication.run(SpringBootDemoApplication.class, args);
    }
}</pre></div>
								<div><p>输出</p></div>
								<div class="w3-custom-code w3-white"><pre>before
-- sayHello() --
class com.listenzhangbin.aop.Chinese$$EnhancerBySpringCGLIB$$56b89168</pre></div>
	<div><p>可以看到类被 CGLIB 增强了<samp>，</samp>也就是动态代理。这里的 CGLIB 代理就是 Spring AOP 的代理<samp>，</samp>这个类也就是所谓的 AOP 代理<samp>，</samp>AOP 代理类在切点动态地织入了增强处理。</p></div>
	<div><p><strong>小结</strong></p></div>
	<div><p>AspectJ 在编译时就增强了目标对象<samp>，</samp>Spring AOP 的动态代理则是在每次运行时动态的增强<samp>，</samp>生成 AOP 代理对象<samp>，</samp>区别在于生成 AOP 代理对象的时机不同<samp>，</samp>相对来说 AspectJ 的静态代理方式具有更好的性能<samp>，</samp>但是 AspectJ 需要特定的编译器进行处理<samp>，</samp>而 Spring AOP 则无需特定的编译器处理。<a class="w3-link" target="_blank" href="http://www.importnew.com/24305.html">原文链接</a></p></div>
</article>