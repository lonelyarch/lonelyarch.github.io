<article>
	<div><header class="w3-header"><p>JDK 动态代理之实现原理</p></header></div>
	<div class="w3-custom-code"><pre>public class MyInvocationHandler implements <span class="w3-text-white">InvocationHandler</span> {

	private Object target; // 目标对象

	public MyInvocationHandler(Object target) {
		super();
		this.target = target;
	}

	public Object invoke(Object proxy, Method method, Object[] args)
			throws Throwable {
		System.out.println("------------------before------------------");
		Object result = method.<span class="w3-text-white">invoke</span>(target, args);
		System.out.println("-------------------after------------------");
		return result;
	}

	/**
	 * 获取目标对象的代理对象
	 * 
	 * @return 代理对象
	 */
	public Object getProxy() {
		return Proxy.<span class="w3-text-white">newProxyInstance</span>(Thread.currentThread()
				.getContextClassLoader(), target.getClass().getInterfaces(),
				this);
	}
}</pre></div>
	<div><p></p></div>
	<div class="w3-custom-code"><pre>/**
 * <span class="w3-text-white">目标对象实现的接口，用 JDK 来生成代理对象一定要实现一个接口</span>
 * 
 */
public interface UserService {

	/**
	 * 目标方法
	 */
	public abstract void add();
}</pre></div>
	<div><p></p></div>
	<div class="w3-custom-code"><pre>/**
 * 目标对象
 * 
 */
public class UserServiceImpl implements UserService {
	@Override
	public void add() {
		System.out.println("--------------------add---------------");
	}
}</pre></div>
	<div><p></p></div>
	<div class="w3-custom-code"><pre>/**
 * 动态代理测试类
 * 
 */
public class ProxyTest {
	@Test
	public void testProxy() throws Throwable {
		// 实例化目标对象
		UserService userService = new UserServiceImpl();
		// 实例化InvocationHandler
		MyInvocationHandler invocationHandler = new MyInvocationHandler(
				userService);
		// 根据目标对象生成代理对象
		UserService proxy = (UserService) invocationHandler.getProxy();
		// 调用代理对象的方法
		proxy.add();
	}
}</pre></div>
	<div><p>执行结果如下：</p></div>
	<div class="w3-custom-code w3-white"><pre>------------------before------------------
--------------------add---------------
-------------------after------------------</pre></div>
	<div><p>用起来是很简单吧<samp>，</samp>其实这里基本上就是 AOP 的一个简单实现了<samp>，</samp>在目标对象的方法执行之前和执行之后进行了增强。Spring 的 AOP 实现其实也是用了 Proxy 和 InvocationHandler 这两个东西的。</p></div>
	<div><p>用起来是比较简单<samp>，</samp>但是如果能知道它背后做了些什么手脚<samp>，</samp>那就更好不过了。首先来看一下 JDK 是怎样生成代理对象的。既然生成代理对象是用的 Proxy 类的静态方 newProxyInstance<samp>，</samp>那么我们就去它的源码里看一下它到底都做了些什么？</p></div>
	<div class="w3-custom-code"><pre>/** 
 * loader：类加载器
 * interfaces：目标对象实现的接口
 * h：InvocationHandler 的实现类
 */  
public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)  
	throws IllegalArgumentException
{  
	if (h == null) {  
		throw new NullPointerException();
	}

	/* 
	 * Look up or generate the designated proxy class.
	 */  
	Class cl = getProxyClass(loader, interfaces);
  
	/* 
	 * Invoke its constructor with the designated invocation handler.
	 */  
	try {  
		// 调用代理对象的构造方法（也就是 $Proxy0(InvocationHandler h)） 
		Constructor cons = cl.getConstructor(constructorParams);
		// 生成代理类的实例并把 MyInvocationHandler 的实例传给它的构造方法  
		return (Object) cons.newInstance(new Object[] { h });
	} catch (NoSuchMethodException e) {  
		throw new InternalError(e.toString());  
	} catch (IllegalAccessException e) {  
		throw new InternalError(e.toString());  
	} catch (InstantiationException e) {  
		throw new InternalError(e.toString());  
	} catch (InvocationTargetException e) {  
		throw new InternalError(e.toString());  
	}  
}</pre></div>
	<div><p>我们再进去 getProxyClass 方法看一下：</p></div>
	<div class="w3-custom-code"><pre>public static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces)  
throws IllegalArgumentException  
{  
	// 如果目标类实现的接口数大于 65535 个则抛出异常  
	if (interfaces.length &gt; 65535) {  
		throw new IllegalArgumentException("interface limit exceeded");  
	}  

	// 声明代理对象所代表的 Class 对象
	Class proxyClass = null;  

	String[] interfaceNames = new String[interfaces.length];  

	Set interfaceSet = new HashSet(); // for detecting duplicates  

	// 遍历目标类所实现的接口  
	for (int i = 0; i &lt; interfaces.length; i++) {  
		  
		// 拿到目标类实现的接口的名称  
		String interfaceName = interfaces[i].getName();  
		Class interfaceClass = null;  
		try {  
		// 加载目标类实现的接口到内存中  
		interfaceClass = Class.forName(interfaceName, false, loader);  
		} catch (ClassNotFoundException e) {  
		}  
		if (interfaceClass != interfaces[i]) {  
		throw new IllegalArgumentException(  
			interfaces[i] + " is not visible from class loader");  
		}  

		// 中间省略了一些无关紧要的代码 .......  
		  
		// 把目标类实现的接口代表的 Class 对象放到 Set 中  
		interfaceSet.add(interfaceClass);  

		interfaceNames[i] = interfaceName;  
	}  

	// 把目标类实现的接口名称作为缓存（Map）中的 key  
	Object key = Arrays.asList(interfaceNames);  

	Map cache;  
  
	synchronized (loaderToCache) {  
		// 从缓存中获取 cache  
		cache = (Map) loaderToCache.get(loader);  
		if (cache == null) {  
		// 如果获取不到，则新建地个 HashMap 实例  
		cache = new HashMap();  
		// 把 HashMap 实例和当前加载器放到缓存中  
		loaderToCache.put(loader, cache);  
		}
	}

	synchronized (cache) {  

		do {  
		// 根据接口的名称从缓存中获取对象  
		Object value = cache.get(key);  
		if (value instanceof Reference) {  
			proxyClass = (Class) ((Reference) value).get();  
		}  
		if (proxyClass != null) {  
			// 如果代理对象的 Class 实例已经存在，则直接返回  
			return proxyClass;  
		} else if (value == pendingGenerationMarker) {  
			try {  
			cache.wait();  
			} catch (InterruptedException e) {  
			}  
			continue;  
		} else {  
			cache.put(key, pendingGenerationMarker);  
			break;  
		}  
		} while (true);  
	}  

	try {  
		// 中间省略了一些代码 .......  
		  
		// <span class="w3-text-white">这里就是动态生成代理对象的最关键的地方</span>  
		byte[] proxyClassFile = ProxyGenerator.generateProxyClass(  
			proxyName, interfaces);  
		try {  
			// 根据代理类的字节码生成代理类的实例  
			proxyClass = defineClass0(loader, proxyName,  
			proxyClassFile, 0, proxyClassFile.length);  
		} catch (ClassFormatError e) {  
			throw new IllegalArgumentException(e.toString());  
		}  
		}  
		// add to set of all generated proxy classes, for isProxyClass  
		proxyClasses.put(proxyClass, null);  

	}   
	// 中间省略了一些代码 .......  
	  
	return proxyClass;
}</pre></div>
	<div><p>进去 ProxyGenerator 类的静态方法 generateProxyClass<samp>，</samp>这里是真正生成代理类 class 字节码的地方：</p></div>
	<div class="w3-custom-code"><pre>public static byte[] generateProxyClass(final String name, Class[] interfaces)  
{  
   ProxyGenerator gen = new ProxyGenerator(name, interfaces);  
   // 这里动态生成代理类的字节码，由于比较复杂就不进去看了  
   final byte[] classFile = gen.generateClassFile();  

   // 如果 saveGeneratedFiles 的值为 true，则会把所生成的代理类的字节码保存到硬盘上  
   if (saveGeneratedFiles) {  
	   java.security.AccessController.doPrivileged(  
	   new java.security.PrivilegedAction&lt;Void&gt;() {  
		   public Void run() {  
			   try {  
				   FileOutputStream file =  
					   new FileOutputStream(dotToSlash(name) + ".class");  
				   file.write(classFile);  
				   file.close();  
				   return null;  
			   } catch (IOException e) {  
				   throw new InternalError(  
					   "I/O exception saving generated file: " + e);  
			   }  
		   }  
	   });  
   }  

   // 返回代理类的字节码  
   return classFile;  
}</pre></div>
	<div><p>现在<samp>，</samp>JDK 是怎样动态生成代理类的字节的原理已经一目了然。</p></div>
	<div><p>好了<samp>，</samp>再来解决另外一个问题<samp>，</samp>那就是由谁来调用 InvocationHandler 的 invoke 方法的。要解决这个问题就要看一下 JDK 到底为我们生成了一个什么东西。用以下代码可以获取到 JDK 为我们生成的字节码并写到硬盘中。</p></div>
	<div class="w3-custom-code"><pre>/**
 * 代理类的生成工具
 * 
 */
public class ProxyGeneratorUtils {

	/**
	 * 把代理类的字节码写到硬盘上
	 * 
	 * @param path
	 *            保存路径
	 */
	public static void writeProxyClassToHardDisk(String path) {
		// 第一种方法，这种方式在刚才分析 ProxyGenerator 时已经知道了
		// System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles",
		// true);

		// 第二种方法
		// 获取代理类的字节码
		byte[] classFile = ProxyGenerator.generateProxyClass("$Proxy11",
				UserServiceImpl.class.getInterfaces());

		FileOutputStream out = null;

		try {
			out = new FileOutputStream(path);
			out.write(classFile);
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}</pre></div>
	<div class="w3-custom-code"><pre>/** 
 * 动态代理测试类
 * 
 */  
public class ProxyTest {  
  
    @Test  
    public void testProxy() throws Throwable {  
        // 实例化目标对象  
        UserService userService = new UserServiceImpl();
        // 实例化InvocationHandler  
        MyInvocationHandler invocationHandler = new MyInvocationHandler(userService);
        // 根据目标对象生成代理对象  
        UserService proxy = (UserService) invocationHandler.getProxy();
        // 调用代理对象的方法  
        proxy.add();
    }  
      
    @Test  
    public void testGenerateProxyClass() {  
        ProxyGeneratorUtils.writeProxyClassToHardDisk("F:/$Proxy11.class");  
    }
}</pre></div>
	<div><p>通过以上代码<samp>，</samp>就可以在 F 盘上生成一个 $Proxy.class 文件了<samp>，</samp>现在用反编译工具来看一下这个 class 文件里面的内容。</p></div>
	<div class="w3-custom-code"><pre>// Decompiled by DJ v3.11.11.95 Copyright 2009 Atanas Neshkov  Date: 2012/8/9 20:11:32  
// Home Page: http://members.fortunecity.com/neshkov/dj.html  
// http://www.neshkov.com/dj.html - Check often for new version!  
// Decompiler options: packimports(3)   
  
import dynamic.proxy.UserService;  
import java.lang.reflect.*;  
  
public final class $Proxy11 extends Proxy  
	implements UserService  
{  
  
	// 构造方法，参数就是刚才传过来的 MyInvocationHandler 类的实例  
	public $Proxy11(InvocationHandler invocationhandler)  
	{  
		super(invocationhandler);  
	}  
  
	public final boolean equals(Object obj)  
	{  
		try  
		{  
			return ((Boolean)super.h.invoke(this, m1, new Object[] {  
				obj  
			})).booleanValue();  
		}  
		catch(Error _ex) { }  
		catch(Throwable throwable)  
		{  
			throw new UndeclaredThrowableException(throwable);  
		}  
	}  
  
	/** 
	 * 这个方法是关键部分 
	 */  
	public final void add()  
	{  
		try  
		{  
			// 实际上就是调用 MyInvocationHandler 的 
			// public Object invoke(Object proxy, Method method, Object[] args) 
			// 方法，第二个问题就解决了  
			super.h.invoke(this, m3, null);  
			return;  
		}  
		catch(Error _ex) { }  
		catch(Throwable throwable)  
		{  
			throw new UndeclaredThrowableException(throwable);  
		}  
	}  
  
	public final int hashCode()  
	{  
		try  
		{  
			return ((Integer)super.h.invoke(this, m0, null)).intValue();  
		}  
		catch(Error _ex) { }  
		catch(Throwable throwable)  
		{  
			throw new UndeclaredThrowableException(throwable);  
		}  
	}  
  
	public final String toString()  
	{  
		try  
		{  
			return (String)super.h.invoke(this, m2, null);  
		}  
		catch(Error _ex) { }  
		catch(Throwable throwable)  
		{  
			throw new UndeclaredThrowableException(throwable);  
		}  
	}  
  
	private static Method m1;  
	private static Method m3;  
	private static Method m0;  
	private static Method m2;  
  
	// 在静态代码块中获取了 4 个方法：Object 中的 equals 方法、
	// UserService 中的 add 方法、Object 中的 hashCode 方法、Object 中 toString 方法  
	static   
	{  
		try  
		{  
			m1 = Class.forName("java.lang.Object").getMethod("equals", new Class[] {  
				Class.forName("java.lang.Object")  
			});  
			m3 = Class.forName("dynamic.proxy.UserService").getMethod("add", new Class[0]);  
			m0 = Class.forName("java.lang.Object").getMethod("hashCode", new Class[0]);  
			m2 = Class.forName("java.lang.Object").getMethod("toString", new Class[0]);  
		}  
		catch(NoSuchMethodException nosuchmethodexception)  
		{  
			throw new NoSuchMethodError(nosuchmethodexception.getMessage());  
		}  
		catch(ClassNotFoundException classnotfoundexception)  
		{  
			throw new NoClassDefFoundError(classnotfoundexception.getMessage());  
		}  
	}  
}</pre></div>
	<div><p>好了<samp>，</samp>到目前为止<samp>，</samp>前面 的两个问题都已经知道怎么回事了<samp>，</samp>现在再用 JDK 动态代理的时候就不只会用而已了<samp>，</samp>真正的达到了<samp>“知其然，知其所以然”</samp>的目的。<a class="w3-link" target="_blank" href="http://rejoy.iteye.com/blog/1627405">原文链接</a></p></div>
</article>