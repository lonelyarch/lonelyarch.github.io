<article>
	<div><header class="w3-header"><p>RPC（Remote Procedure Call）原理</p></header></div>
	<div><p>RPC（Remote Procedure Call）调用的流程所涉及到的通信细节：</p></div>
	<div><img class="w3-width" alt="Oops" src="src/subs/4/articles/0052/images/00.jpg" /></div>
	<div><p>1. 服务消费方（client）以本地调用方式调用服务<samp>；</samp></p></div>
	<div><p>2. client stub 接收到调用之后负责将方法、参数等组装成能够进行网络传输的消息体<samp>；</samp></p></div>
	<div><p>3. client stub 找到服务地址<samp>，</samp>并将消息发送到服务端<samp>；</samp></p></div>
	<div><p>4. server stub 收到消息后进行解码<samp>；</samp></p></div>
	<div><p>5. server stub 根据解码结果调用本地的服务<samp>；</samp></p></div>
	<div><p>6. 本地服务执行并将结果返回给 server stub<samp>；</samp></p></div>
	<div><p>7. server stub 将返回结果打包成消息并发送至消费方<samp>；</samp></p></div>
	<div><p>8. client stub 接收到消息<samp>，</samp>并进行解码<samp>；</samp></p></div>
	<div><p>9. 服务消费方得到最终结果。</p></div>
	<div><p>RPC（Remote Procedure Call）的目标就是要把 2~8 这些步骤都封装起来<samp>，</samp>让用户对这些细节透明。</p></div>
	<div><p><strong>怎么做到透明化远程服务调用？</strong></p></div>
	<div><p>怎么封装通信细节才能让用户像以本地调用方式调用远程服务呢？对 Java 来说就是使用代理。Java 代理有两种方式：1）JDK 动态代理<samp>；</samp>2）字节码生成。尽管字节码生成方式实现的代理更为强大和高效<samp>，</samp>但代码维护不易<samp>，</samp>大部分公司实现 RPC 框架时还是选择动态代理方式。</p></div>
	<div><p>...</p></div>
	<div>
		<p><strong>参考资料：</strong>
		<a style="display:block;overflow:hidden;text-overflow:ellipsis" target="_blank" class="w3-link" href="http://www.cnblogs.com/LBSer/p/4853234.html">http://www.cnblogs.com/LBSer/p/4853234.html</a>
	</p></div>
</article>