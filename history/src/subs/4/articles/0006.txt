<article>
	<div><header class="w3-header"><p>各种并发场景下的解决思路？</p></header></div>
	<div>
		<p>线程池的关键点为：（1）尽量减少线程切换和管理的开支；（2）最大化利用 CPU 。对于（1），<span class="w3-text-light-green">要求线程数尽量少</span>，这样可以减少线程切换和管理的开支；对于（2），<span class="w3-text-light-green">要求尽量多的线程数</span>，以保证 CPU 资源最大化的利用。</p>
		<p>所以，对于任务耗时短的情况，要求线程数尽量少，如果线程数太多，有可能出现线程切换和管理的时间大于任务执行的时间，则低效。对于耗时长的任务，<span class="w3-text-light-green">要分是 CPU 任务还是 IO 等类型的任务</span>，如果是 CPU 类型的任务，线程数不宜太多，但如果是 IO 类型的任务，线程多一些更好，可以更充分利用 CPU 。</p>
		<p>总结：</p>
		<p>高并发，低耗时的情况：建议少线程，只要满足并发即可，例如，并发 100，线程池可能设置为 10 就可以；</p>
		<p>低并发，高耗时的情况：建议多线程，保证有空闲线程能够接受新的任务，例如，并发 10，线程池可能就要设置为 20；</p>
		<p>高并发，高耗时的情况：（1）要分析任务类型；（2）增加排队；（3）加大线程数。</p>
	</div>
</article>