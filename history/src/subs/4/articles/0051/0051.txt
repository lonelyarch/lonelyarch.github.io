<article>
	<div><header class="w3-header"><p>分布式事务之两阶段提交协议</p></header></div>
	<div><p>两阶段提交协议（Two-phase Commit<samp>，</samp>2PC）经常被用来实现分布式事务。一般分为协调器和若干事务执行者两种角色<samp>，</samp>这里的事务执行者就是具体的数据库<samp>，</samp>抽象点说就是能够控制数据库的程序。协调器可以和事务执行器在一台机器上。</p></div>
	<div><p>在分布式系统中<samp>，</samp>每个节点虽然可以知道自己的操作是成功或失败<samp>，</samp>但却无法知道其它节点的操作的成功或失败。当一个事务跨越多个节点的时候<samp>，</samp>为了保持事务的 ACID 特性<samp>，</samp>需要引入一个作为协调者的组件来统一掌控所有节点（称作参与者）。</p></div>
	<div><img class="w3-width" alt="Oops" src="src/subs/4/articles/0051/images/01.jpg" /></div>
	<div><p>我们设想从支付宝里转 10000 元到余额宝的场景……</p></div>
	<div><p>1. 首先我们的应用程序发起一个请求到协调器<samp>，</samp>然后由协调器来保证分布式事务。</p></div>
	<div><p>2. 准备凭证阶段：</p></div>
	<div><p>（1）协调器先将&lt;prepare&gt;消息写到本地日志<samp>；</samp></p></div>
	<div><p>（2）向所有的参与者发起&lt;prepare&gt;消息。以支付宝转账到余额宝为例<samp>，</samp>协调器给 A 的 prepare 消息是通知支付宝数据库相应账户扣款 10000<samp>，</samp>协调器给 B 的 prepare 消息是通知余额宝数据库相应账户增加 10000。</p></div>
	<div class="w3-example">
		<div class="w3-code w3-text-black" style="overflow:auto">
			<p>注释：为什么在执行任务前需要先写本地日志<samp>，</samp>主要是为了故障后恢复用<samp>，</samp>本地日志起到现实生活中凭证的效果<samp>，</samp>如果没有本地日志（凭证）<samp>，</samp>出问题容易死无对证。</p>
		</div>
	</div>
	<div><p>参与者收到&lt;prepare&gt;消息后<samp>，</samp>执行具体的本机事务<samp>，</samp>但不会进行 commit<samp>，</samp>如果成功返回&lt;yes&gt;<samp>，</samp>不成功返回&lt;no&gt;。同理<samp>，</samp>返回前都应把要返回的消息写到日志里<samp>，</samp>当作凭证。</p></div>
	<div><p>支付宝：</p></div>
	<div class="w3-custom-code"><pre>BEGIN WORK
    select money from <span class="w3-text-white">zhifubao</span> where user='guowei' for update;
    update <span class="w3-text-white">zhifubao</span> set money=money-10000 where user='guowei';
    ...
    Operation N
 
 （1）根据状态向协调者发送 YES 或 NO<samp>；</samp>（2）等待协调者的指令过来。</pre></div>
	<div><p>余额宝：</p></div>
	<div class="w3-custom-code"><pre>BEGIN WORK
    select money from <span class="w3-text-white">yuebao</span> where user='guowei' for update;
    update <span class="w3-text-white">yuebao</span> set money=money+10000 where user='guowei';
    ...
    Operation N

（1）根据状态向协调者发送 YES 或 NO<samp>；</samp>（2）等待协调者的指令过来。</pre></div>
	<div><p>3. 协调器收集所有执行器返回的消息<samp>，</samp>如果所有执行器都返回 yes<samp>，</samp>那么给所有执行器发生送 commit 消息<samp>，</samp>执行器收到 commit 后执行本地事务的 commit 操作<samp>；</samp>如果有任意一个执行器返回 no<samp>，</samp>那么给所有执行器发送 abort 消息<samp>，</samp>执行器收到 abort 消息后执行事务 abort 操作。</p></div>
	<div class="w3-custom-code"><pre>if 协调者指令 == "to_commit":
    commit work #提交事务
else:
    ROLLBACK #回滚</pre></div>
	<div class="w3-example">
		<div class="w3-code w3-text-black" style="overflow:auto">
			<p>注释：协调器或参与者把发送或接收到的消息先写到日志里<samp>，</samp>主要是为了故障后恢复用。举个例子<samp>，</samp>比如某个参与者从故障中恢复后<samp>，</samp>先检查本机的日志<samp>，</samp>如果已收到&lt;commit&gt;<samp>，</samp>则提交<samp>，</samp>如果是&lt;abort&gt;<samp>，</samp>则回滚。如果是&lt;yes&gt;<samp>，</samp>则再向控制器询问以确定下一步操作。如果什么都没有<samp>，</samp>则很可能在&lt;prepare&gt;阶段就崩溃了<samp>，</samp>因此需要回滚。</p>
		</div>
	</div>
	<div><p>...</p></div>
</article>